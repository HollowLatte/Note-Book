import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o,c,a as e,d as l,b as s}from"./app-DNRIH2TH.js";const n={},i=e("h2",{id:"什么是深分页",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是深分页"},[e("span",null,"什么是深分页？")])],-1),h=e("p",null,"深分页是指在搜索结果中获取大量数据时所遇到的性能问题和解决方案。ES默认情况下，对于大型结果集，使用传统的偏移量(from)和限制( limit)方式进行分页查询可能会导致性能下降。",-1),p=e("p",null,"并且默认情况下，ES的from和size最大值都为10000，即默认情况下最多查询2万的数据",-1),m=e("h2",{id:"深分页解决方案",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#深分页解决方案"},[e("span",null,"深分页解决方案")])],-1),d=e("p",null,"ES的深分页问题可以通过使用游标（scroll）或搜索后深度分页（search after）来解决。其中，ES官方已不推荐使用scroll的方式，目前推荐的是search after的方式",-1),f={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#search-after",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"search-after",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#search-after"},[e("span",null,"Search After")])],-1),_=e("p",null,"Search After的本质其实是将数据排序，然后根据每页最后一条数据的排序值去获取下一页的数据。",-1),g=e("p",null,"因此，使用Search After时，排序字段的选择很关键，需要区分度高，并且排序值不重复。通常可以选择数据的创建时间与数据id共同作为排序值",-1);function S(E,y){const t=r("ExternalLinkIcon");return o(),c("div",null,[i,h,p,m,d,e("p",null,[e("a",f,[l("Search After官方文档"),s(t)])]),u,_,g])}const x=a(n,[["render",S],["__file","deep-pages-search.html.vue"]]),N=JSON.parse('{"path":"/practice-manual/elasticsearch/paginate-search/deep-pages-search.html","title":"深分页查询","lang":"zh-CN","frontmatter":{"title":"深分页查询","author":null,"category":"Elasticsearch","tag":"Elasticsearch","description":"什么是深分页？ 深分页是指在搜索结果中获取大量数据时所遇到的性能问题和解决方案。ES默认情况下，对于大型结果集，使用传统的偏移量(from)和限制( limit)方式进行分页查询可能会导致性能下降。 并且默认情况下，ES的from和size最大值都为10000，即默认情况下最多查询2万的数据 深分页解决方案 ES的深分页问题可以通过使用游标（scrol...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/elasticsearch/paginate-search/deep-pages-search.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"深分页查询"}],["meta",{"property":"og:description","content":"什么是深分页？ 深分页是指在搜索结果中获取大量数据时所遇到的性能问题和解决方案。ES默认情况下，对于大型结果集，使用传统的偏移量(from)和限制( limit)方式进行分页查询可能会导致性能下降。 并且默认情况下，ES的from和size最大值都为10000，即默认情况下最多查询2万的数据 深分页解决方案 ES的深分页问题可以通过使用游标（scrol..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-27T18:36:54.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Elasticsearch"}],["meta",{"property":"article:modified_time","content":"2024-03-27T18:36:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深分页查询\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-27T18:36:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"什么是深分页？","slug":"什么是深分页","link":"#什么是深分页","children":[]},{"level":2,"title":"深分页解决方案","slug":"深分页解决方案","link":"#深分页解决方案","children":[]},{"level":2,"title":"Search After","slug":"search-after","link":"#search-after","children":[]}],"git":{"createdTime":1711564614000,"updatedTime":1711564614000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"practice-manual/elasticsearch/paginate-search/deep-pages-search.md","localizedDate":"2024年3月27日","excerpt":"<h2>什么是深分页？</h2>\\n<p>深分页是指在搜索结果中获取大量数据时所遇到的性能问题和解决方案。ES默认情况下，对于大型结果集，使用传统的偏移量(from)和限制(\\nlimit)方式进行分页查询可能会导致性能下降。</p>\\n<p>并且默认情况下，ES的from和size最大值都为10000，即默认情况下最多查询2万的数据</p>\\n<h2>深分页解决方案</h2>\\n<p>ES的深分页问题可以通过使用游标（scroll）或搜索后深度分页（search after）来解决。其中，ES官方已不推荐使用scroll的方式，目前推荐的是search\\nafter的方式</p>\\n<p><a href=\\"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#search-after\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Search After官方文档</a></p>","autoDesc":true}');export{x as comp,N as data};
