import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as e,e as l}from"./app-R-jbemKs.js";const t={},n=l('<p>Java中类的加载阶段分为加载、链接、初始化。其中连接过程又包含了验证、准备和解析。</p><h2 id="加载阶段" tabindex="-1"><a class="header-anchor" href="#加载阶段" aria-hidden="true">#</a> 加载阶段</h2><p>查找并加载类的二进制数据(网络，jar包，运行时生成等) 。将类的.class文件中的二进制数据读入内存中，将其放在元空间（方法区）中，然后创建一个java.lang.Class对象（存放在堆中）用来封装类在方法区的数据结构</p><h2 id="链接阶段" tabindex="-1"><a class="header-anchor" href="#链接阶段" aria-hidden="true">#</a> 链接阶段</h2><p>在链接阶段，Java类加载器对类进行验证、准备和解析操作。将类与类的关系（符号引用转为直接引用）确定好，校验字节码</p><ol><li><p>验证：校验类的正确性（文件格式，元数据，字节码，二进制兼容性）</p></li><li><p>准备：为类的静态变量分配内存，将其初始化为默认值。但是在到达初始化之前，类变量都没有初始化为真正的初始值。当然，对于final修饰的变量来说，会在此时就被初始化为指定值</p></li><li><p>解析：把类的符号引用转为直接引用(类或接口、字段、类方法、接口方法、方法类型、方法句柄和访问控制修饰符7类符号引用 )</p></li></ol><h2 id="初始化阶段" tabindex="-1"><a class="header-anchor" href="#初始化阶段" aria-hidden="true">#</a> 初始化阶段</h2><p>初始化是类加载的最后一步，也是真正执行类中定义的 Java 程序代码(字节码)，初始化阶段是执行类构造器<code>&lt;clinit&gt; ()</code> 方法的过程。这里利用了一种懒加载的思想，所有Java虚拟机实现必须在每个类或接口被Java程序首次主动使用才初始化，但类加载不一定，静态代码块在类初始化时执行</p><ol><li><p>当遇到 new 、 getstatic、putstatic或invokestatic 这4条字节码指令时，比如 new 一个类，读取一个静态字段(未被 final 修饰) 、或调用一个类的静态方法时</p></li><li><p>使用 java.lang.reflect 包的方法对类进行反射调用时 ，如果类没初始化，需要触发其初始化</p></li><li><p>初始化一个类，如果其父类还未初始化，则先触发该父类的初始化</p></li><li><p>当虚拟机启动时，用户需要定义一个要执行的主类 (包含 main 方法的那个类)，虚拟机会先初始化这个类</p></li><li><p>当使用 JDK1.7 的动态动态语言时，如果一个 MethodHandle 实例的最后解析结构为 REF_getStatic、REF_putStatic、REF_invokeStatic、的方法句柄，并且这个句柄没有初始化，则需要先触发器初始化</p></li></ol><h2 id="什么时候会被加载" tabindex="-1"><a class="header-anchor" href="#什么时候会被加载" aria-hidden="true">#</a> 什么时候会被加载？</h2><p>Java中的类在以下几种情况中会被加载：</p><ol><li><p><strong>当创建类的实例时，如果该类还没有被加载，则会触发类的加载。</strong> 例如，通过关键字new创建一个类的对象时，JVM会检查该类是否已经加载，如果没有加载，则会调用类加载器进行加载。</p></li><li><p><strong>当使用类的静态变量或静态方法时，如果该类还没有被加载，则会触发类的加载。</strong> 例如，当调用某个类的静态方法时，JVM会检查该类是否已经加载，如果没有加载，则会调用类加载器进行加载。</p></li><li><p><strong>当使用反射机制访问类时，如果该类还没有被加载，则会触发类的加载。</strong> 例如，当使用Class.forName() 方法加载某个类时，JVM会检查该类是否已经加载，如果没有加载，则会调用类加载器进行加载。</p></li><li><p>当JVM启动时，会自动加载一些基础类，例如java.lang.Object类和java.lang.Class类等。</p></li></ol><p>总之，Java中的类加载其实是延迟加载的，除了一些基础的类以外，其他的类都是在需要使用类时才会进行加载。同时，Java还支持动态加载类，即在运行时通过程序来加载类，这为Java程序带来了更大的灵活性。</p>',13),s=[n];function p(r,o){return i(),e("div",null,s)}const h=a(t,[["render",p],["__file","classes-loading.html.vue"]]);export{h as default};
