import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as t,e as s}from"./app-4HbIzINy.js";const n={},p=s(`<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>jps命令可以显示当前运行的java进程以及相关参数，它的实现机制如下：</p><p>java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_ {userName}/），有几个文件，名字就是java进程的pid，因此列出当前运行的java进程，只是把这个目录里的文件名列一下而已。 至于系统的参数什么，就可以解析这几个文件获得。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</span>
jps <span class="token parameter variable">-l</span>

<span class="token comment"># 输出传递给JVM的参数</span>
jps <span class="token parameter variable">-v</span>

<span class="token comment"># 输出传递给main 方法的参数</span>
jps <span class="token parameter variable">-m</span>

<span class="token comment"># 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数</span>
jps <span class="token parameter variable">-q</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),i=[p];function o(r,l){return e(),t("div",null,i)}const d=a(n,[["render",o],["__file","jps.html.vue"]]),v=JSON.parse('{"path":"/practice-manual/jvm/tool/jps.html","title":"jps命令","lang":"zh-CN","frontmatter":{"title":"jps命令","author":null,"category":"JVM","tag":"JVM","description":"原理 jps命令可以显示当前运行的java进程以及相关参数，它的实现机制如下： java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_ {userName}/），有几个文件，名字就是java进程的pid，...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/jvm/tool/jps.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"jps命令"}],["meta",{"property":"og:description","content":"原理 jps命令可以显示当前运行的java进程以及相关参数，它的实现机制如下： java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_ {userName}/），有几个文件，名字就是java进程的pid，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:40:23.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:40:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jps命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T15:40:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"createdTime":1711467623000,"updatedTime":1711467623000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":0.79,"words":237},"filePathRelative":"practice-manual/jvm/tool/jps.md","localizedDate":"2024年3月26日","excerpt":"<h2>原理</h2>\\n<p>jps命令可以显示当前运行的java进程以及相关参数，它的实现机制如下：</p>\\n<p>java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_\\n{userName}/），有几个文件，名字就是java进程的pid，因此列出当前运行的java进程，只是把这个目录里的文件名列一下而已。\\n至于系统的参数什么，就可以解析这几个文件获得。</p>\\n<h2>使用</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</span>\\njps <span class=\\"token parameter variable\\">-l</span>\\n\\n<span class=\\"token comment\\"># 输出传递给JVM的参数</span>\\njps <span class=\\"token parameter variable\\">-v</span>\\n\\n<span class=\\"token comment\\"># 输出传递给main 方法的参数</span>\\njps <span class=\\"token parameter variable\\">-m</span>\\n\\n<span class=\\"token comment\\"># 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数</span>\\njps <span class=\\"token parameter variable\\">-q</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,v as data};
