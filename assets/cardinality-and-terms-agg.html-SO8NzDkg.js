import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CjdU_M7_.js";const e={},o=t(`<p>单独的cardinality和terms聚合已经写过，此处主要讲解两者的嵌套使用</p><h2 id="分组数据再去重" tabindex="-1"><a class="header-anchor" href="#分组数据再去重"><span>分组数据再去重</span></a></h2><p>例如，我们需要统计参加会议最多的前3个用户，并去除重复参加的会议</p><p>可以在terms聚合的sort字段中指定子聚合的名称，那么排序结果就会以子聚合的cardinality的value进行排序</p><p>相当于SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> meetingId<span class="token punctuation">)</span> <span class="token keyword">AS</span> meeting_count
<span class="token keyword">FROM</span> tb_user
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> username
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> meeting_count <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求参数如下：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;aggs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;group-by-username&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;meeting-count&quot;</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;aggs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;count-meeting-id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;cardinality&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;meetingId&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;aggregations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;group-by-username&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;doc_count_error_upper_bound&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sum_other_doc_count&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">&quot;buckets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wuhu&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;doc_count&quot;</span><span class="token operator">:</span> <span class="token number">333</span><span class="token punctuation">,</span>
          <span class="token property">&quot;count-meeting-id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">25</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;snk&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;doc_count&quot;</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>
          <span class="token property">&quot;count-meeting-id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">15</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zdp&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;doc_count&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
          <span class="token property">&quot;count-meeting-id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">6</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，嵌套聚合返回的聚合结果也是有两层。以wuhu用户为例，333是去重前参加会议的总数，25是去重后参加会议的总数。所以如果想要去重后的数据，直接取内层cardinality聚合的value即可</p>`,11),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","cardinality-and-terms-agg.html.vue"]]),k=JSON.parse('{"path":"/practice-manual/elasticsearch/search/aggregation/cardinality-and-terms-agg.html","title":"Cardinality和Terms结合使用","lang":"zh-CN","frontmatter":{"title":"Cardinality和Terms结合使用","author":null,"category":"Elasticsearch","tag":"Elasticsearch","description":"单独的cardinality和terms聚合已经写过，此处主要讲解两者的嵌套使用 分组数据再去重 例如，我们需要统计参加会议最多的前3个用户，并去除重复参加的会议 可以在terms聚合的sort字段中指定子聚合的名称，那么排序结果就会以子聚合的cardinality的value进行排序 相当于SQL： 请求参数如下： 请求结果： 可以看到，嵌套聚合返回...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/elasticsearch/search/aggregation/cardinality-and-terms-agg.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Cardinality和Terms结合使用"}],["meta",{"property":"og:description","content":"单独的cardinality和terms聚合已经写过，此处主要讲解两者的嵌套使用 分组数据再去重 例如，我们需要统计参加会议最多的前3个用户，并去除重复参加的会议 可以在terms聚合的sort字段中指定子聚合的名称，那么排序结果就会以子聚合的cardinality的value进行排序 相当于SQL： 请求参数如下： 请求结果： 可以看到，嵌套聚合返回..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T08:07:11.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Elasticsearch"}],["meta",{"property":"article:modified_time","content":"2024-03-21T08:07:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cardinality和Terms结合使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-21T08:07:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"分组数据再去重","slug":"分组数据再去重","link":"#分组数据再去重","children":[]}],"git":{"createdTime":1711008431000,"updatedTime":1711008431000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":0.93,"words":279},"filePathRelative":"practice-manual/elasticsearch/search/aggregation/cardinality-and-terms-agg.md","localizedDate":"2024年3月21日","excerpt":"<p>单独的cardinality和terms聚合已经写过，此处主要讲解两者的嵌套使用</p>\\n<h2>分组数据再去重</h2>\\n<p>例如，我们需要统计参加会议最多的前3个用户，并去除重复参加的会议</p>\\n<p>可以在terms聚合的sort字段中指定子聚合的名称，那么排序结果就会以子聚合的cardinality的value进行排序</p>\\n<p>相当于SQL：</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">SELECT</span> username<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">COUNT</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">DISTINCT</span> meetingId<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">AS</span> meeting_count\\n<span class=\\"token keyword\\">FROM</span> tb_user\\n<span class=\\"token keyword\\">GROUP</span> <span class=\\"token keyword\\">BY</span> username\\n<span class=\\"token keyword\\">ORDER</span> <span class=\\"token keyword\\">BY</span> meeting_count <span class=\\"token keyword\\">DESC</span> <span class=\\"token keyword\\">LIMIT</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
