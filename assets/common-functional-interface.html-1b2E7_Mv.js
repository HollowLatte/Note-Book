const n=JSON.parse('{"key":"v-18950421","path":"/notebook/java/function-programming/common-functional-interface.html","title":"常见的函数式接口","lang":"zh-CN","frontmatter":{"title":"常见的函数式接口","author":null,"category":"Java","tag":"Java","description":"Function Function 是一个接受一个参数并产生一个结果的函数式接口。它定义了一个名为 apply(T) 的抽象方法，该方法接受一个参数类型为 T 的输入，并返回类型为 R 的结果。可以将 Function 用于将一个值转换为另一个值，或者进行任何需要输入和输出的转换操作。 @FunctionalInterface public interface Function&lt;T, R&gt; { R apply(T t); }","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/java/function-programming/common-functional-interface.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"常见的函数式接口"}],["meta",{"property":"og:description","content":"Function Function 是一个接受一个参数并产生一个结果的函数式接口。它定义了一个名为 apply(T) 的抽象方法，该方法接受一个参数类型为 T 的输入，并返回类型为 R 的结果。可以将 Function 用于将一个值转换为另一个值，或者进行任何需要输入和输出的转换操作。 @FunctionalInterface public interface Function&lt;T, R&gt; { R apply(T t); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Java"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见的函数式接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"Function","slug":"function","link":"#function","children":[]},{"level":2,"title":"Supplier","slug":"supplier","link":"#supplier","children":[]},{"level":2,"title":"Consumer","slug":"consumer","link":"#consumer","children":[]},{"level":2,"title":"Predicate","slug":"predicate","link":"#predicate","children":[]}],"git":{},"readingTime":{"minutes":1.35,"words":405},"filePathRelative":"notebook/java/function-programming/common-functional-interface.md","excerpt":"<h2> Function</h2>\\n<p>Function 是一个接受一个参数并产生一个结果的函数式接口。它定义了一个名为 apply(T) 的抽象方法，该方法接受一个参数类型为 T\\n的输入，并返回类型为 R 的结果。可以将 Function 用于将一个值转换为另一个值，或者进行任何需要输入和输出的转换操作。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@FunctionalInterface</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Function</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">R</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">R</span> <span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
