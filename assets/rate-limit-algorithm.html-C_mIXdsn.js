import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,e as l}from"./app-CDroZFTS.js";const o={},a=l('<h2 id="固定窗口" tabindex="-1"><a class="header-anchor" href="#固定窗口"><span>固定窗口</span></a></h2><p>固定窗口限流算法（Fixed Window Rate Limiting Algorithm）是一种最简单的限流算法，其原理是在固定时间窗口(单位时间) 内限制请求的数量。该算法将时间分成固定的窗口，并在每个窗口内限制请求的数量。具体来说，算法将请求按照时间顺序放入时间窗口中，并计算该时间窗口内的请求数量，如果请求数量超出了限制，则拒绝该请求。</p><ul><li>优点：固定窗口算法非常简单，易于实现和理解。</li><li>缺点：存在明显的临界问题，比如: 假设限流阀值为5个请求，单位时间窗口是1s,如果我们在单位时间内的前0.8-1s和1-1.2s，分别并发5个请求。虽然都没有超过阀值，但是如果算0.8-1.2s,则并发数高达10，已经超过单位时间1s不超过5阀值的定义啦。</li></ul><h2 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口"><span>滑动窗口</span></a></h2><p>滑动窗口限流算法是一种常用的限流算法，用于控制系统对外提供服务的速率，防止系统被过多的请求压垮。 它将单位时间周期分为n个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期。它可以解决固定窗口临界值的问题。</p><p>格子周期划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确。</p><p>实现：可以利用Redis的zset实现滑动窗口限流</p><p>优点：</p><ul><li>精度高（通过调整时间窗口的大小来实现不同的限流效果）</li><li>可扩展性强（可以非常容易地与其他限流算法结合使用）</li></ul><p>缺点：</p><ul><li>突发流量无法处理（无法应对短时间内的大量请求，但是一旦到达限流后，请求都会直接暴力被拒绝），需要合理调整时间窗口大小。</li></ul><h2 id="漏桶" tabindex="-1"><a class="header-anchor" href="#漏桶"><span>漏桶</span></a></h2><p>我们可以把发请求的动作比作成注水到桶中，我们处理请求的过程可以比喻为漏桶漏水。我们往桶中以任意速率流入水，以一定速率流出水。当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。</p><p>如果想要实现这个算法的话也很简单，准备一个队列用来保存请求，然后我们定期从队列中拿请求来执行就好了（和消息队列削峰/限流的思想是一样的）。</p><p>优点：</p><ul><li>可以平滑控制流量的进出，保证系统的稳定性和安全性。</li></ul><p>缺点：</p><ul><li>无法处理突发流量，因为他只能按照固定的速度来处理请求，如果某个请求的流量突增，因为漏桶的机制就导致了他还是只能一个一个的按照固定速度进行消费。</li></ul><h2 id="令牌桶" tabindex="-1"><a class="header-anchor" href="#令牌桶"><span>令牌桶</span></a></h2><p>令牌桶算法是一种基于漏桶算法的算法，它是漏桶算法的一种改进。</p><p>令牌桶算法是一种常用的限流算法，可以用于限制单位时间内请求的数量。有一个线程以固定的速率再往桶里放入令牌，而有请求过来的时候，就会去桶里取出令牌，能取到就执行，取不到就拒绝或者阻塞。</p><p>优点：</p><ul><li>稳定性高：令牌桶算法可以控制请求的处理速度，可以使系统的负载变得稳定。</li><li>精度高：令牌桶算法可以根据实际情况动态调整生成令牌的速率，可以实现较高精度的限流。</li><li>弹性好：令牌桶算法可以处理突发流量，可以在短时间内提供更多的处理能力，以处理突发流量。</li></ul><p>Guava的RateLimiter限流组件，就是基于令牌桶算法实现的。</p><p>缺点：</p><ul><li>实现复杂：相对于固定窗口算法等其他限流算法，令牌桶算法的实现较为复杂。</li><li>对短时请求难以处理：在短时间内有大量请求到来时，可能会导致令牌桶中的令牌被快速消耗完，从而限流。这种情况下，可以考虑使用漏桶算法。</li><li>时间精度要求高：令牌桶算法需要在固定的时间间隔内生成令牌，因此要求时间精度较高，如果系统时间不准确，可能会导致限流效果不理想。</li></ul><p>总体来说，令牌桶算法具有较高的稳定性和精度，但实现相对复杂，适用于对稳定性和精度要求较高的场景。</p>',27),n=[a];function r(p,h){return e(),i("div",null,n)}const m=t(o,[["render",r],["__file","rate-limit-algorithm.html.vue"]]),d=JSON.parse('{"path":"/notebook/high-availability/rate-limit-algorithm.html","title":"限流算法","lang":"zh-CN","frontmatter":{"title":"限流算法","author":null,"category":"HA","tag":"HA","description":"固定窗口 固定窗口限流算法（Fixed Window Rate Limiting Algorithm）是一种最简单的限流算法，其原理是在固定时间窗口(单位时间) 内限制请求的数量。该算法将时间分成固定的窗口，并在每个窗口内限制请求的数量。具体来说，算法将请求按照时间顺序放入时间窗口中，并计算该时间窗口内的请求数量，如果请求数量超出了限制，则拒绝该请求。...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/high-availability/rate-limit-algorithm.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"限流算法"}],["meta",{"property":"og:description","content":"固定窗口 固定窗口限流算法（Fixed Window Rate Limiting Algorithm）是一种最简单的限流算法，其原理是在固定时间窗口(单位时间) 内限制请求的数量。该算法将时间分成固定的窗口，并在每个窗口内限制请求的数量。具体来说，算法将请求按照时间顺序放入时间窗口中，并计算该时间窗口内的请求数量，如果请求数量超出了限制，则拒绝该请求。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T15:09:08.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"HA"}],["meta",{"property":"article:modified_time","content":"2024-03-21T15:09:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"限流算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-21T15:09:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"固定窗口","slug":"固定窗口","link":"#固定窗口","children":[]},{"level":2,"title":"滑动窗口","slug":"滑动窗口","link":"#滑动窗口","children":[]},{"level":2,"title":"漏桶","slug":"漏桶","link":"#漏桶","children":[]},{"level":2,"title":"令牌桶","slug":"令牌桶","link":"#令牌桶","children":[]}],"git":{"createdTime":1711033748000,"updatedTime":1711033748000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":4.03,"words":1209},"filePathRelative":"notebook/high-availability/rate-limit-algorithm.md","localizedDate":"2024年3月21日","excerpt":"<h2>固定窗口</h2>\\n<p>固定窗口限流算法（Fixed Window Rate Limiting Algorithm）是一种最简单的限流算法，其原理是在固定时间窗口(单位时间)\\n内限制请求的数量。该算法将时间分成固定的窗口，并在每个窗口内限制请求的数量。具体来说，算法将请求按照时间顺序放入时间窗口中，并计算该时间窗口内的请求数量，如果请求数量超出了限制，则拒绝该请求。</p>\\n<ul>\\n<li>优点：固定窗口算法非常简单，易于实现和理解。</li>\\n<li>缺点：存在明显的临界问题，比如:\\n假设限流阀值为5个请求，单位时间窗口是1s,如果我们在单位时间内的前0.8-1s和1-1.2s，分别并发5个请求。虽然都没有超过阀值，但是如果算0.8-1.2s,则并发数高达10，已经超过单位时间1s不超过5阀值的定义啦。</li>\\n</ul>","autoDesc":true}');export{m as comp,d as data};
