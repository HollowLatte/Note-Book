import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as l,a as e,d as t,b as r,e as n}from"./app-CXUo51sk.js";const p={},d=n('<h2 id="stream-与-mq" tabindex="-1"><a class="header-anchor" href="#stream-与-mq"><span>Stream 与 MQ</span></a></h2><p>Redis Stream是 Redis 5.0 引入的一种数据结构，用于消息队列的持久化和主备复制。</p><p>在Redis5.0之前，如果用redis来模拟MQ功能，通常使用list或PUB/SUB发布订阅模式。</p><p>Stream 具有完善的MQ功能：</p><ol><li>消息持久化存储，持久化保存消息数据，确保消息在存储中的可靠性和持久性。即使 Redis 服务器重启，消息仍然可以保留，避免数据丢失。</li><li>提供了消费者组功能。类似Kafka与RocketMQ的消费组</li><li>消费确认ack机制。</li></ol><h3 id="pub-sub模式" tabindex="-1"><a class="header-anchor" href="#pub-sub模式"><span>pub/sub模式</span></a></h3><p>消息发布之后，主动推送消息到订阅的客户端。</p><p>优点：简单快速 缺点：一旦redis服务或者消费者重启，那么会丢失在重启的这段时间之内所有的消息，因为Redis没有持久化这种模式的缓存，只是做了内存缓冲区 + 消息转发</p><p>可以通过Redission的getTopic 获取一个pubsub通道</p><h3 id="list方式" tabindex="-1"><a class="header-anchor" href="#list方式"><span>list方式</span></a></h3><p>list的方式是stream出现之前可靠度比较高的实现</p><p>使用bpop来阻塞等待消息</p><p>优点：</p><ul><li>rdb或者aof可以在一定范围内降低消息丢失率。如果消费者重启，可以从之前消费的进度继续读取数据</li><li>使用bpop指令阻塞等待消息，不用一直轮询，降低网络交互产生的IO损耗。</li></ul><p>缺点：没有真正具备MQ的功能，如消息确认机制、消费者组等</p><p>可以通过Redission的getQueue 获取一个队列</p><h2 id="stream-数据格式" tabindex="-1"><a class="header-anchor" href="#stream-数据格式"><span>Stream 数据格式</span></a></h2><p>Stream 在Redis的存储结构类似与Redis中的Hash</p><p>Stream的一条消息中包含消息id和消息体</p><p>消息ID称为<code>StreamMessageId</code>：格式为<code>毫秒时间戳+序号</code>，如1706162668568-0，高位是毫秒级时间戳，低位是递增变量，用来标记唯一一条消息。 消息体为key-value的格式</p><h2 id="stream-相关文档" tabindex="-1"><a class="header-anchor" href="#stream-相关文档"><span>Stream 相关文档</span></a></h2>',21),m={href:"https://redis.io/docs/data-types/streams/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://github.com/redisson/redisson/wiki/7.-distributed-collections/#720-stream",target:"_blank",rel:"noopener noreferrer"};function h(u,b){const a=i("ExternalLinkIcon");return o(),l("div",null,[d,e("p",null,[t("Redis Stream 官方文档："),e("a",m,[t("Redis Streams"),r(a)])]),e("p",null,[t("Redisson Stream API 文档："),e("a",c,[t("Redisson Stream API"),r(a)])])])}const g=s(p,[["render",h],["__file","stream-mq.html.vue"]]),k=JSON.parse('{"path":"/notebook/redis/streams/stream-mq.html","title":"Stream与MQ","lang":"zh-CN","frontmatter":{"title":"Stream与MQ","author":null,"category":"Redis","tag":"Redis","date":"2024-01-24T00:00:00.000Z","description":"Stream 与 MQ Redis Stream是 Redis 5.0 引入的一种数据结构，用于消息队列的持久化和主备复制。 在Redis5.0之前，如果用redis来模拟MQ功能，通常使用list或PUB/SUB发布订阅模式。 Stream 具有完善的MQ功能： 消息持久化存储，持久化保存消息数据，确保消息在存储中的可靠性和持久性。即使 Redis ...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/redis/streams/stream-mq.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Stream与MQ"}],["meta",{"property":"og:description","content":"Stream 与 MQ Redis Stream是 Redis 5.0 引入的一种数据结构，用于消息队列的持久化和主备复制。 在Redis5.0之前，如果用redis来模拟MQ功能，通常使用list或PUB/SUB发布订阅模式。 Stream 具有完善的MQ功能： 消息持久化存储，持久化保存消息数据，确保消息在存储中的可靠性和持久性。即使 Redis ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T19:31:22.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T19:31:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Stream与MQ\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-21T19:31:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"Stream 与 MQ","slug":"stream-与-mq","link":"#stream-与-mq","children":[{"level":3,"title":"pub/sub模式","slug":"pub-sub模式","link":"#pub-sub模式","children":[]},{"level":3,"title":"list方式","slug":"list方式","link":"#list方式","children":[]}]},{"level":2,"title":"Stream 数据格式","slug":"stream-数据格式","link":"#stream-数据格式","children":[]},{"level":2,"title":"Stream 相关文档","slug":"stream-相关文档","link":"#stream-相关文档","children":[]}],"git":{"createdTime":1711049482000,"updatedTime":1711049482000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":1.76,"words":529},"filePathRelative":"notebook/redis/streams/stream-mq.md","localizedDate":"2024年1月24日","excerpt":"<h2>Stream 与 MQ</h2>\\n<p>Redis Stream是 Redis 5.0 引入的一种数据结构，用于消息队列的持久化和主备复制。</p>\\n<p>在Redis5.0之前，如果用redis来模拟MQ功能，通常使用list或PUB/SUB发布订阅模式。</p>\\n<p>Stream 具有完善的MQ功能：</p>\\n<ol>\\n<li>消息持久化存储，持久化保存消息数据，确保消息在存储中的可靠性和持久性。即使 Redis\\n服务器重启，消息仍然可以保留，避免数据丢失。</li>\\n<li>提供了消费者组功能。类似Kafka与RocketMQ的消费组</li>\\n<li>消费确认ack机制。</li>\\n</ol>","autoDesc":true}');export{g as comp,k as data};
