const a=JSON.parse('{"key":"v-54d6b26e","path":"/practice-manual/jvm/tool/jmap.html","title":"jmap命令","lang":"zh-CN","frontmatter":{"title":"jmap命令","author":null,"category":"JVM","tag":"JVM","description":"作用 主要用于打印指定Java进程的内存细节。也就是说可以使用jmap生成Heap Dump。如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。 堆Dump是反应Java堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。 一般，在内存不足、GC异常等情况下，我们就会怀疑有内存泄露。这个时候我们就可以制作堆Dump来查看具体情况。分析原因。 使用 jmap的帮助信息如下： Usage: jmap [option] &lt;pid&gt; (to connect to running process) jmap [option] &lt;executable &lt;core&gt; (to connect to a core file) jmap [option] [server_id@]&lt;remote server IP or hostname&gt; (to connect to remote debug server) where &lt;option&gt; is one of: &lt;none&gt; to print same info as Solaris pmap -heap to print java heap summary -histo[:live] to print histogram of java object heap; if the \\"live\\" suboption is specified, only count live objects -clstats to print class loader statistics -finalizerinfo to print information on objects awaiting finalization -dump:&lt;dump-options&gt; to dump java heap in hprof binary format dump-options: live dump only live objects; if not specified, all objects in the heap are dumped. format=b binary format file=&lt;file&gt; dump heap to &lt;file&gt; Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt; -F force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo to force a heap dump or histogram when &lt;pid&gt; does not respond. The \\"live\\" suboption is not supported in this mode. -h | -help to print this help message -J&lt;flag&gt; to pass &lt;flag&gt; directly to the runtime system","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/jvm/tool/jmap.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"jmap命令"}],["meta",{"property":"og:description","content":"作用 主要用于打印指定Java进程的内存细节。也就是说可以使用jmap生成Heap Dump。如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。 堆Dump是反应Java堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。 一般，在内存不足、GC异常等情况下，我们就会怀疑有内存泄露。这个时候我们就可以制作堆Dump来查看具体情况。分析原因。 使用 jmap的帮助信息如下： Usage: jmap [option] &lt;pid&gt; (to connect to running process) jmap [option] &lt;executable &lt;core&gt; (to connect to a core file) jmap [option] [server_id@]&lt;remote server IP or hostname&gt; (to connect to remote debug server) where &lt;option&gt; is one of: &lt;none&gt; to print same info as Solaris pmap -heap to print java heap summary -histo[:live] to print histogram of java object heap; if the \\"live\\" suboption is specified, only count live objects -clstats to print class loader statistics -finalizerinfo to print information on objects awaiting finalization -dump:&lt;dump-options&gt; to dump java heap in hprof binary format dump-options: live dump only live objects; if not specified, all objects in the heap are dumped. format=b binary format file=&lt;file&gt; dump heap to &lt;file&gt; Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt; -F force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo to force a heap dump or histogram when &lt;pid&gt; does not respond. The \\"live\\" suboption is not supported in this mode. -h | -help to print this help message -J&lt;flag&gt; to pass &lt;flag&gt; directly to the runtime system"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"JVM"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jmap命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"注意","slug":"注意","link":"#注意","children":[]}],"git":{},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"practice-manual/jvm/tool/jmap.md","excerpt":"<h2> 作用</h2>\\n<p>主要用于打印指定Java进程的内存细节。也就是说可以使用jmap生成Heap\\nDump。如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。</p>\\n<p>堆Dump是反应Java堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。\\n一般，在内存不足、GC异常等情况下，我们就会怀疑有内存泄露。这个时候我们就可以制作堆Dump来查看具体情况。分析原因。</p>\\n<h2> 使用</h2>\\n<p><strong>jmap的帮助信息如下</strong>：</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>Usage:\\n    jmap <span class=\\"token punctuation\\">[</span>option<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span>pid<span class=\\"token operator\\">&gt;</span>\\n        <span class=\\"token punctuation\\">(</span>to connect to running process<span class=\\"token punctuation\\">)</span>\\n    jmap <span class=\\"token punctuation\\">[</span>option<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span>executable <span class=\\"token operator\\">&lt;</span>core<span class=\\"token operator\\">&gt;</span>\\n        <span class=\\"token punctuation\\">(</span>to connect to a core <span class=\\"token function\\">file</span><span class=\\"token punctuation\\">)</span>\\n    jmap <span class=\\"token punctuation\\">[</span>option<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">[</span>server_id@<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&lt;</span>remote server IP or hostname<span class=\\"token operator\\">&gt;</span>\\n        <span class=\\"token punctuation\\">(</span>to connect to remote debug server<span class=\\"token punctuation\\">)</span>\\n\\nwhere <span class=\\"token operator\\">&lt;</span>option<span class=\\"token operator\\">&gt;</span> is one of:\\n    <span class=\\"token operator\\">&lt;</span>none<span class=\\"token operator\\">&gt;</span>               to print same info as Solaris pmap\\n    <span class=\\"token parameter variable\\">-heap</span>                to print <span class=\\"token function\\">java</span> heap summary\\n    -histo<span class=\\"token punctuation\\">[</span>:live<span class=\\"token punctuation\\">]</span>        to print histogram of <span class=\\"token function\\">java</span> object heap<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">if</span> the <span class=\\"token string\\">\\"live\\"</span>\\n                         suboption is specified, only count live objects\\n    <span class=\\"token parameter variable\\">-clstats</span>             to print class loader statistics\\n    <span class=\\"token parameter variable\\">-finalizerinfo</span>       to print information on objects awaiting finalization\\n    -dump:<span class=\\"token operator\\">&lt;</span>dump-options<span class=\\"token operator\\">&gt;</span> to dump <span class=\\"token function\\">java</span> heap <span class=\\"token keyword\\">in</span> hprof binary <span class=\\"token function\\">format</span>\\n                         dump-options:\\n                           live         dump only live objects<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">if</span> not specified,\\n                                        all objects <span class=\\"token keyword\\">in</span> the heap are dumped.\\n                           <span class=\\"token assign-left variable\\">format</span><span class=\\"token operator\\">=</span>b     binary <span class=\\"token function\\">format</span>\\n                           <span class=\\"token assign-left variable\\">file</span><span class=\\"token operator\\">=</span><span class=\\"token operator\\">&lt;</span>file<span class=\\"token operator\\">&gt;</span>  dump heap to <span class=\\"token operator\\">&lt;</span>file<span class=\\"token operator\\">&gt;</span>\\n                         Example: jmap -dump:live,format<span class=\\"token operator\\">=</span>b,file<span class=\\"token operator\\">=</span>heap.bin <span class=\\"token operator\\">&lt;</span>pid<span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token parameter variable\\">-F</span>                   force. Use with -dump:<span class=\\"token operator\\">&lt;</span>dump-options<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">&lt;</span>pid<span class=\\"token operator\\">&gt;</span> or <span class=\\"token parameter variable\\">-histo</span>\\n                         to force a heap dump or histogram when <span class=\\"token operator\\">&lt;</span>pid<span class=\\"token operator\\">&gt;</span> does not\\n                         respond. The <span class=\\"token string\\">\\"live\\"</span> suboption is not supported\\n                         <span class=\\"token keyword\\">in</span> this mode.\\n    <span class=\\"token parameter variable\\">-h</span> <span class=\\"token operator\\">|</span> <span class=\\"token parameter variable\\">-help</span>           to print this <span class=\\"token builtin class-name\\">help</span> message\\n    -J<span class=\\"token operator\\">&lt;</span>flag<span class=\\"token operator\\">&gt;</span>             to pass <span class=\\"token operator\\">&lt;</span>flag<span class=\\"token operator\\">&gt;</span> directly to the runtime system\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
