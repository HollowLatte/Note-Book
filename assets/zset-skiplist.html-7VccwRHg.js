const t=JSON.parse('{"key":"v-3193bfb9","path":"/interview-shorthand/redis/data-structure/zset-skiplist.html","title":"Zset实现--跳表","lang":"zh-CN","frontmatter":{"title":"Zset实现--跳表","author":null,"category":"Redis","tag":"Redis","description":"Zset是怎么实现的？ Redis中的ZSet在实现中，有多种结构，大类的话有两种，分别是ziplist(压缩列表)和skiplist(跳跃表)，但是这只是以前，在Redis 5.0中新增了一个listpack（紧凑列表）的数据结构，这种数据结构就是为了替代ziplist的，而在之后Redis 7.0的发布中，在Zset的实现中，已经彻底不在使用zipList了。 当ZSet的元素数量比较少时，Redis会采用ZipList（ListPack）来存储ZSet的数据。 ZipList（ListPack）是一种紧凑的列表结构，它通过连续存储元素来节约内存空间。 当ZSet的元素数量增多时，Redis会自动将ZipList（ListPack）转换为SkipList，以保持元素的有序性和支持范围查询操作。","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/interview-shorthand/redis/data-structure/zset-skiplist.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Zset实现--跳表"}],["meta",{"property":"og:description","content":"Zset是怎么实现的？ Redis中的ZSet在实现中，有多种结构，大类的话有两种，分别是ziplist(压缩列表)和skiplist(跳跃表)，但是这只是以前，在Redis 5.0中新增了一个listpack（紧凑列表）的数据结构，这种数据结构就是为了替代ziplist的，而在之后Redis 7.0的发布中，在Zset的实现中，已经彻底不在使用zipList了。 当ZSet的元素数量比较少时，Redis会采用ZipList（ListPack）来存储ZSet的数据。 ZipList（ListPack）是一种紧凑的列表结构，它通过连续存储元素来节约内存空间。 当ZSet的元素数量增多时，Redis会自动将ZipList（ListPack）转换为SkipList，以保持元素的有序性和支持范围查询操作。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Redis"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Zset实现--跳表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"Zset是怎么实现的？","slug":"zset是怎么实现的","link":"#zset是怎么实现的","children":[]},{"level":2,"title":"跳表","slug":"跳表","link":"#跳表","children":[]},{"level":2,"title":"为什么ZSet支持高效的范围查询？还可以 O(1) 复杂度获取元素权重值？","slug":"为什么zset支持高效的范围查询-还可以-o-1-复杂度获取元素权重值","link":"#为什么zset支持高效的范围查询-还可以-o-1-复杂度获取元素权重值","children":[]}],"git":{},"readingTime":{"minutes":1.97,"words":592},"filePathRelative":"interview-shorthand/redis/data-structure/zset-skiplist.md","excerpt":"<h2> Zset是怎么实现的？</h2>\\n<p>Redis中的ZSet在实现中，有多种结构，大类的话有两种，分别是ziplist(压缩列表)和skiplist(跳跃表)，但是这只是以前，在Redis\\n5.0中新增了一个listpack（紧凑列表）的数据结构，这种数据结构就是为了替代ziplist的，而在之后Redis\\n7.0的发布中，在Zset的实现中，已经彻底不在使用zipList了。</p>\\n<p>当ZSet的元素数量比较少时，Redis会采用ZipList（ListPack）来存储ZSet的数据。\\nZipList（ListPack）是一种紧凑的列表结构，它通过连续存储元素来节约内存空间。\\n当ZSet的元素数量增多时，Redis会自动将ZipList（ListPack）转换为SkipList，以保持元素的有序性和支持范围查询操作。</p>","autoDesc":true}');export{t as data};
