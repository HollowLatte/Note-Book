const e=JSON.parse('{"key":"v-5d5591b0","path":"/notebook/netty/core-concepts.html","title":"Java NIO核心概念","lang":"zh-CN","frontmatter":{"title":"Java NIO核心概念","author":null,"category":"Netty","tag":"Netty","description":"NIO核心组件 NIO 主要包括以下三个核心组件： Buffer（缓冲区）：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer中，而写操作时将 Buffer中的数据写入到 Channel 中。 Channel（通道）：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过Channel来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。 Selector（选择器）：允许一个线程处理多个 Channel，基于事件驱动的 I/O 多路复用模型。所有的 Channel 都可以注册到Selector上，由Selector来分配线程来处理事件。","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/netty/core-concepts.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Java NIO核心概念"}],["meta",{"property":"og:description","content":"NIO核心组件 NIO 主要包括以下三个核心组件： Buffer（缓冲区）：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer中，而写操作时将 Buffer中的数据写入到 Channel 中。 Channel（通道）：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过Channel来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。 Selector（选择器）：允许一个线程处理多个 Channel，基于事件驱动的 I/O 多路复用模型。所有的 Channel 都可以注册到Selector上，由Selector来分配线程来处理事件。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Netty"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java NIO核心概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"NIO核心组件","slug":"nio核心组件","link":"#nio核心组件","children":[]},{"level":2,"title":"Netty","slug":"netty","link":"#netty","children":[]},{"level":2,"title":"Reactor模型","slug":"reactor模型","link":"#reactor模型","children":[{"level":3,"title":"Reactor模型——主从多线程模型（父子多线程模型）","slug":"reactor模型——主从多线程模型-父子多线程模型","link":"#reactor模型——主从多线程模型-父子多线程模型","children":[]}]}],"git":{},"readingTime":{"minutes":2.86,"words":858},"filePathRelative":"notebook/netty/core-concepts.md","excerpt":"<h2> NIO核心组件</h2>\\n<p><strong>NIO 主要包括以下三个核心组件</strong>：</p>\\n<ul>\\n<li><strong>Buffer（缓冲区）</strong>：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到\\nBuffer中，而写操作时将 Buffer中的数据写入到 Channel 中。</li>\\n<li><strong>Channel（通道）</strong>：Channel 是一个双向的、可读可写的数据传输通道，NIO\\n通过Channel来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。</li>\\n<li><strong>Selector（选择器）</strong>：允许一个线程处理多个\\nChannel，基于事件驱动的 I/O 多路复用模型。所有的 Channel 都可以注册到Selector上，由Selector来分配线程来处理事件。</li>\\n</ul>","autoDesc":true}');export{e as data};
