import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as p,a as n,d as a,b as l,e as i}from"./app-CjdU_M7_.js";const c={},r=i(`<h2 id="读取嵌套配置" tabindex="-1"><a class="header-anchor" href="#读取嵌套配置"><span>读取嵌套配置</span></a></h2><p>例如现在application.yml中有如下的配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">websocket</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8090</span>
  <span class="token key atrule">boss-group</span><span class="token punctuation">:</span>
    <span class="token key atrule">threads</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">worker-group</span><span class="token punctuation">:</span>
    <span class="token key atrule">threads</span><span class="token punctuation">:</span> <span class="token number">12</span>
  <span class="token key atrule">heartbeat</span><span class="token punctuation">:</span>
    <span class="token key atrule">interval-time</span><span class="token punctuation">:</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么代码中应该如何配置？使用<code>@Value</code>一个个映射过于繁琐，应该使用<code>@ConfigurationProperties</code></p><p>以下是读取上面配置对应的实体类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;websocket&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BossGroup</span> bossGroup<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">WorkerGroup</span> workerGroup<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">HeartBeat</span> heartBeat<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BossGroup</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> threads<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WorkerGroup</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> threads<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HeartBeat</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> intervalTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用静态内部类来映射带有子参数的配置</p>`,7),u={href:"https://docs.spring.io/spring-boot/docs/3.1.5/reference/html/configuration-metadata.html#appendix.configuration-metadata.annotation-processor.automatic-metadata-generation.nested-properties",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=t("ExternalLinkIcon");return o(),p("div",null,[r,n("blockquote",null,[n("p",null,[a("官方文档也有描述该做法："),n("a",u,[a("Spring Boot Configuration Metadata"),l(s)])])])])}const b=e(c,[["render",d],["__file","read-nest-config.html.vue"]]),y=JSON.parse('{"path":"/practice-manual/framework/spring/read-nest-config.html","title":"读取嵌套配置","lang":"zh-CN","frontmatter":{"title":"读取嵌套配置","author":null,"category":"Spring","tag":"Spring","description":"读取嵌套配置 例如现在application.yml中有如下的配置： 那么代码中应该如何配置？使用@Value一个个映射过于繁琐，应该使用@ConfigurationProperties 以下是读取上面配置对应的实体类： 使用静态内部类来映射带有子参数的配置 官方文档也有描述该做法：Spring Boot Configuration Metadata","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/framework/spring/read-nest-config.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"读取嵌套配置"}],["meta",{"property":"og:description","content":"读取嵌套配置 例如现在application.yml中有如下的配置： 那么代码中应该如何配置？使用@Value一个个映射过于繁琐，应该使用@ConfigurationProperties 以下是读取上面配置对应的实体类： 使用静态内部类来映射带有子参数的配置 官方文档也有描述该做法：Spring Boot Configuration Metadata"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T08:07:11.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:modified_time","content":"2024-03-21T08:07:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"读取嵌套配置\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-21T08:07:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"读取嵌套配置","slug":"读取嵌套配置","link":"#读取嵌套配置","children":[]}],"git":{"createdTime":1711008431000,"updatedTime":1711008431000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":0.59,"words":176},"filePathRelative":"practice-manual/framework/spring/read-nest-config.md","localizedDate":"2024年3月21日","excerpt":"<h2>读取嵌套配置</h2>\\n<p>例如现在application.yml中有如下的配置：</p>\\n<div class=\\"language-yaml\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code><span class=\\"token key atrule\\">websocket</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token key atrule\\">port</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">8090</span>\\n  <span class=\\"token key atrule\\">boss-group</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token key atrule\\">threads</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">1</span>\\n  <span class=\\"token key atrule\\">worker-group</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token key atrule\\">threads</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">12</span>\\n  <span class=\\"token key atrule\\">heartbeat</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token key atrule\\">interval-time</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">30</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,y as data};
