import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,e as o}from"./app-R-jbemKs.js";const l={},r=o('<h2 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性" aria-hidden="true">#</a> 可见性</h2><p>对于volatile变量，当对volatile变量进行写操作的时候，JVM会向处理器发送一条lock前缀的指令，将这个缓存中的变量回写到系统主存中。</p><p>所以，如果一个变量被volatile所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议( MESI)，也会把这个变量的值从主存加载到自己的缓存中。这就保证了一个volatile在并发编程中，其值在多个缓存中是可见的。</p><h2 id="有序性" tabindex="-1"><a class="header-anchor" href="#有序性" aria-hidden="true">#</a> 有序性</h2><p>volatile除了可以保证数据的可见性之外，还有一个强大的功能，那就是他可以<strong>禁止指令重排优化</strong>等。</p><p>普通的变量仅仅会保证在该方法的执行过程中所依赖的赋值结果的地方都能获得正确的结果，而不能保证变量的赋值操作的顺序与程序代码中的执行顺序一致。</p><p>volatile是通过内存屏障来禁止指令重排的，这就保证了代码的程序会严格按照代码的先后顺序执行。这就保证了有序性。被volatile修饰的变量的操作，会严格按照代码顺序执行，load-&gt; add-&gt;save 的执行顺序就是：load、add、save。</p><p>如经典的<strong>双重校验锁必须加volatile的问题</strong>，就是因为volatile加了内存屏障。</p><p><strong>若不加volatile，可能会返回一个未完成初始化操作的对象，是不完整的，当尝试使用这个对象的时候就极有可能发生NPE异常。</strong></p>',9),i=[r];function s(n,d){return a(),t("div",null,i)}const h=e(l,[["render",s],["__file","volatile.html.vue"]]);export{h as default};
