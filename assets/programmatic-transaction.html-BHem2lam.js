import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,a as n,d as a,b as c,e as i}from"./app-BGUJa96a.js";const l={},r={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction-programmatic",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>Spring提供了两种编程式事务的实现方式：<code>TransactionTemplate</code>和<code>PlatformTransactionManager</code>。</p><p>Spring推荐使用<code>TransactionTemplate</code>来管理事务，因为它已经基于<code>PlatformTransactionManager</code> 封装了一层操作，可以通过方便地处理自定义事务。而<code>PlatformTransactionManager</code>更底层一些</p><h2 id="transactiontemplate" tabindex="-1"><a class="header-anchor" href="#transactiontemplate"><span>TransactionTemplate</span></a></h2><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionTemplateService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 带有返回值的事务</span>
        transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>status <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">updateOperation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">updateOperation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 回滚事务</span>
                status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 没有返回值的事务</span>
        transactionTemplate<span class="token punctuation">.</span><span class="token function">executeWithoutResult</span><span class="token punctuation">(</span>status <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">updateOperation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">updateOperation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 回滚事务</span>
                status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>status.setRollbackOnly</code>用于回滚事务</p><p>如果想要设置事务的隔离级别和传播机制，可以直接用TransactionTemplate.setXXX的方式设置，TransactionTemplate是线程安全的。 但是如果在一个类中想要使用不同隔离级别设置的TransactionTemplate，这就需要创建两个不同的TransactionTemplate然后分别设置了</p><h2 id="platformtransactionmanager" tabindex="-1"><a class="header-anchor" href="#platformtransactionmanager"><span>PlatformTransactionManager</span></a></h2><p>PlatformTransactionManager是TransactionManager的一个常用实现类</p><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlatformTransactionManagerService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PlatformTransactionManager</span> transactionManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultTransactionDefinition</span> def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        def<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;SomeTxName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        def<span class="token punctuation">.</span><span class="token function">setPropagationBehavior</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">updateOperation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">updateOperation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回滚事务</span>
            transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function d(m,k){const s=e("ExternalLinkIcon");return o(),p("div",null,[n("p",null,[a("官方文档先来上："),n("a",r,[a("Programmatic Transaction Management"),c(s)])]),u])}const b=t(l,[["render",d],["__file","programmatic-transaction.html.vue"]]),f=JSON.parse('{"path":"/practice-manual/framework/spring/programmatic-transaction.html","title":"编程式事务","lang":"zh-CN","frontmatter":{"title":"编程式事务","author":null,"category":"Spring","tag":"Spring","description":"官方文档先来上：Programmatic Transaction Management Spring提供了两种编程式事务的实现方式：TransactionTemplate和PlatformTransactionManager。 Spring推荐使用TransactionTemplate来管理事务，因为它已经基于PlatformTransactionMa...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/framework/spring/programmatic-transaction.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"编程式事务"}],["meta",{"property":"og:description","content":"官方文档先来上：Programmatic Transaction Management Spring提供了两种编程式事务的实现方式：TransactionTemplate和PlatformTransactionManager。 Spring推荐使用TransactionTemplate来管理事务，因为它已经基于PlatformTransactionMa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T19:10:17.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:modified_time","content":"2024-03-26T19:10:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编程式事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T19:10:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"TransactionTemplate","slug":"transactiontemplate","link":"#transactiontemplate","children":[]},{"level":2,"title":"PlatformTransactionManager","slug":"platformtransactionmanager","link":"#platformtransactionmanager","children":[]}],"git":{"createdTime":1711480217000,"updatedTime":1711480217000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":1.01,"words":302},"filePathRelative":"practice-manual/framework/spring/programmatic-transaction.md","localizedDate":"2024年3月26日","excerpt":"<p>官方文档先来上：<a href=\\"https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction-programmatic\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Programmatic Transaction Management</a></p>\\n<p>Spring提供了两种编程式事务的实现方式：<code>TransactionTemplate</code>和<code>PlatformTransactionManager</code>。</p>","autoDesc":true}');export{b as comp,f as data};
