import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-BIdAApvj.js";const p={},e=t(`<p>以一个可以接收字符并回写字符的Netty Server为例</p><h2 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>Server</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringNettyServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (1)</span>
        <span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token class-name">NettyRuntime</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

        <span class="token class-name">ServerBootstrap</span> serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2)</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span> <span class="token comment">// (3)</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// (4)</span>
                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment">// (5)</span>
                <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// (6)</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// (7)</span>
                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (8)</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (9)</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ol><li><code>NioEventLoopGroup</code>用来创建和管理服务端Channel，可以通过构造方法指定线程数量，线程数越多，NIO 事件循环可以处理的网络连接就越多</li><li><code>ServerBootstrap</code>可以看做像SpringBoot启动类一样的东西，它里面封装了很多细节，但是不需要关心它的细节，配置参数后使用即可</li><li><code>group(bossGroup, workerGroup)</code>设置两个group的原因是Netty使用了<strong>主从Reactor网络模型</strong>，一个为主一个为从</li><li><code>channel(NioServerSocketChannel.class)</code>设置主从Reactor中主的channel具体实现类，后续创建的channel实例以它为准，而常用的就是NioServerSocketChannel</li><li><code>option(ChannelOption.SO_BACKLOG, 1024)</code>设置主channel的参数<code>SO_BACKLOG</code> ，SO表示Socket，backlog其实是Socket中的一个参数，JDK中的Socket API中<code>ServerSocket</code> 构造方法就可以设置，作用是Server在处理连接请求时，需要先将连接请求放入连接队列中，然后再逐个处理。Socket backlog参数就是用来设置 连接队列 的最大长度。</li><li><code>childOption(ChannelOption.SO_KEEPALIVE, true)</code> 设置从channel的keepalive参数，用于设置TCP连接的保活机制，检测连接是否仍然可用。若不设置该参数，当网络异常导致连接断开后，Server无法感知，可能会导致数据丢失或程序异常。keepalive具体的探测间隔、超时时间等都是在系统内核参数设置的，无需在代码层面关心</li><li><code>handler(new LoggingHandler(LogLevel.INFO))</code> LoggingHandler是Netty提供的日志处理器，此处是将该Handler配置给了主channel，那么主channel的连接建立、连接断开、数据读写、异常等事件都会打印出日志，方便排查。该Handler不是必须配置</li><li><code>childHandler(new ChannelInitializer&lt;&gt;(){})</code>配置从channel处理器的标准写法</li><li><code>ChannelPipeline</code>配置从channel的Handler流水线，ChannelPipeline上的Handler会按指定的顺序执行</li></ol><blockquote><p>更多Java Socket参数可以在<code>java.net.SocketOptions</code>查看，带有注释。Netty的ChannelOption中的参数基本都可以在SocketOptions中找到</p></blockquote><h2 id="handler" tabindex="-1"><a class="header-anchor" href="#handler"><span>Handler</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">// (1)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token comment">// (2)</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Success to receive message:{}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token string">&quot;Copy that!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelInactive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token comment">// (4)</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Inactive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><ol><li><code>SimpleChannelInboundHandler</code>此处使用的入站处理器支持泛型，可以简化开发。需要注意，要在childhandler加上<code>StringDecoder</code> 才能正常转换。</li><li><code>channelRead0</code>重写该方法可以自定义处理接收到的Client数据</li></ol>`,10),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","netty-quickstart.html.vue"]]),d=JSON.parse('{"path":"/notebook/netty/netty-quickstart.html","title":"Netty快速入门","lang":"zh-CN","frontmatter":{"title":"Netty快速入门","author":null,"category":"Netty","tag":"Netty","date":"2024-03-14T00:00:00.000Z","description":"以一个可以接收字符并回写字符的Netty Server为例 Server 解释： NioEventLoopGroup用来创建和管理服务端Channel，可以通过构造方法指定线程数量，线程数越多，NIO 事件循环可以处理的网络连接就越多 ServerBootstrap可以看做像SpringBoot启动类一样的东西，它里面封装了很多细节，但是不需要关心它的...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/netty/netty-quickstart.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Netty快速入门"}],["meta",{"property":"og:description","content":"以一个可以接收字符并回写字符的Netty Server为例 Server 解释： NioEventLoopGroup用来创建和管理服务端Channel，可以通过构造方法指定线程数量，线程数越多，NIO 事件循环可以处理的网络连接就越多 ServerBootstrap可以看做像SpringBoot启动类一样的东西，它里面封装了很多细节，但是不需要关心它的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-24T07:11:51.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Netty"}],["meta",{"property":"article:published_time","content":"2024-03-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-24T07:11:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Netty快速入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-24T07:11:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"Server","slug":"server","link":"#server","children":[]},{"level":2,"title":"Handler","slug":"handler","link":"#handler","children":[]}],"git":{"createdTime":1711264311000,"updatedTime":1711264311000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":2.45,"words":734},"filePathRelative":"notebook/netty/netty-quickstart.md","localizedDate":"2024年3月14日","excerpt":"<p>以一个可以接收字符并回写字符的Netty Server为例</p>\\n<h2>Server</h2>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">StringNettyServer</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">EventLoopGroup</span> bossGroup <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NioEventLoopGroup</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// (1)</span>\\n        <span class=\\"token class-name\\">EventLoopGroup</span> workerGroup <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NioEventLoopGroup</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">NettyRuntime</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">availableProcessors</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n\\n        <span class=\\"token class-name\\">ServerBootstrap</span> serverBootstrap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ServerBootstrap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// (2)</span>\\n        serverBootstrap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">group</span><span class=\\"token punctuation\\">(</span>bossGroup<span class=\\"token punctuation\\">,</span> workerGroup<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// (3)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">channel</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">NioServerSocketChannel</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// (4)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">option</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ChannelOption</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SO_BACKLOG</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// (5)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">childOption</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ChannelOption</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SO_KEEPALIVE</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// (6)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">handler</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LoggingHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">LogLevel</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">INFO</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// (7)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">childHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ChannelInitializer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// (8)</span>\\n                    <span class=\\"token annotation punctuation\\">@Override</span>\\n                    <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">initChannel</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Channel</span> ch<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token class-name\\">ChannelPipeline</span> pipeline <span class=\\"token operator\\">=</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pipeline</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// (9)</span>\\n                        pipeline<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">StringDecoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                        pipeline<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">StringEncoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                        pipeline<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">StringHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">;</span>\\n        serverBootstrap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">bind</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
