import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o,c as l,a as n,d as s,b as p,e as a}from"./app-R-jbemKs.js";const c={},u=a('<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>在GitHub上部署Vuepress需要用到GitHub Action，通过特定的事件触发构建、部署操作，实现自动化部署</p><p>总的来说需要三个步骤：</p><ol><li>生成并配置Token：由于部署的操作需要有操作仓库的权限，所以需要一个Token，该Token会在workflow脚本中使用</li><li>编写workflow脚本：该脚本规定触发构建的事件，脚本执行的构建目录等等</li><li>配置GitHub Pages：配置已构建好的分支作为GitHub Pages展示页面</li></ol><h2 id="生成并配置token" tabindex="-1"><a class="header-anchor" href="#生成并配置token" aria-hidden="true">#</a> 生成并配置Token</h2><ol><li>点击 个人头像-&gt; Settings -&gt; Develop settings -&gt; Personal access tokens -&gt; Tokens(classic) -&gt; Generate new token</li><li>生成完成后去仓库的Settings -&gt; Actions secrets and variables -&gt; New repository secret，将刚刚生成的token作为值，名称命名为<code>ACCESS_TOKEN</code>（其实命名为其他也可以，只要在workflow使用该名称即可）</li></ol><h2 id="编写workflow脚本" tabindex="-1"><a class="header-anchor" href="#编写workflow脚本" aria-hidden="true">#</a> 编写workflow脚本</h2><p>在项目根目录创建<code>.github/workflows</code>目录，workflow脚本在该目录下都会被GitHub Action识别</p>',8),r={href:"https://github.com/marketplace/actions/vuepress-deploy",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Build and Deploy VuePress
  // 触发事件
<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> push <span class="token punctuation">]</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        // 使用第三方的包
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> vuepress<span class="token punctuation">-</span>deploy
        // 使用第三方的包
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> jenkey2011/vuepress<span class="token punctuation">-</span>deploy@master
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          // 引用Token
          <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
          // 操作的仓库
          <span class="token key atrule">TARGET_REPO</span><span class="token punctuation">:</span> HollowLatte/Note<span class="token punctuation">-</span>Book
          // 构建完成的文件存放的分支
          <span class="token key atrule">TARGET_BRANCH</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>pages
          // 执行的构建命令
          <span class="token key atrule">BUILD_SCRIPT</span><span class="token punctuation">:</span> npm install <span class="token punctuation">-</span>g pnpm <span class="token important">&amp;&amp;</span> pnpm install <span class="token important">&amp;&amp;</span> pnpm run docs<span class="token punctuation">:</span>build
          // 构建完成的文件所在目录，与VuePress工程中配置的一致即可
          <span class="token key atrule">BUILD_DIR</span><span class="token punctuation">:</span> ./dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>TARGET_BRANCH 配置的分支，在执行完流水线后，会覆盖该分支原本的内容，因此建议配置为专门用于存放构建文件的分支，而不是提交代码的分支</p></div><h2 id="配置github-pages" tabindex="-1"><a class="header-anchor" href="#配置github-pages" aria-hidden="true">#</a> 配置GitHub Pages</h2><ol><li>代码仓库Settings -&gt; Pages -&gt; Source -&gt; Deploy from a branch</li><li>Branch 选择workflow脚本中指定的构建Branch，目录选择<code>/</code>即可，然后save</li><li>等待一会，GitHub Page就会部署完成，GitHub Page的URL一般为：<code>https://{用户名}.github.io/{仓库名}</code></li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意，如果VuePress工程中的base路径未配置的话，部署完成后，页面获取静态资源时，会去<code>https://{用户名}.github.io</code>获取，这样是找不到资源的</p><p>因此，需要配置VuePress中的base路径为当前仓库名，这样静态资源就会去<code>https://{用户名}.github.io/{仓库名}</code>获取</p></div>`,5);function k(v,b){const e=i("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("下面将编写一个workflow脚本，其实是使用了GitHub的Marketplace中的一个VuePress部署的workflow脚本模板"),n("a",r,[s("Vuepress-Deploy"),p(e)])]),d])}const g=t(c,[["render",k],["__file","github-deploy-vuepress.html.vue"]]);export{g as default};
