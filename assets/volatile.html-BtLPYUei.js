import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as o,e as l}from"./app-BtuJf2rB.js";const a={},i=l('<h2 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性"><span>可见性</span></a></h2><p>对于volatile变量，当对volatile变量进行写操作的时候，JVM会向处理器发送一条lock前缀的指令，将这个缓存中的变量回写到系统主存中。</p><p>所以，如果一个变量被volatile所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议( MESI)，也会把这个变量的值从主存加载到自己的缓存中。这就保证了一个volatile在并发编程中，其值在多个缓存中是可见的。</p><h2 id="有序性" tabindex="-1"><a class="header-anchor" href="#有序性"><span>有序性</span></a></h2><p>volatile除了可以保证数据的可见性之外，还有一个强大的功能，那就是他可以<strong>禁止指令重排优化</strong>等。</p><p>普通的变量仅仅会保证在该方法的执行过程中所依赖的赋值结果的地方都能获得正确的结果，而不能保证变量的赋值操作的顺序与程序代码中的执行顺序一致。</p><p>volatile是通过内存屏障来禁止指令重排的，这就保证了代码的程序会严格按照代码的先后顺序执行。这就保证了有序性。被volatile修饰的变量的操作，会严格按照代码顺序执行，load-&gt; add-&gt;save 的执行顺序就是：load、add、save。</p><p>如经典的<strong>双重校验锁必须加volatile的问题</strong>，就是因为volatile加了内存屏障。</p><p><strong>若不加volatile，可能会返回一个未完成初始化操作的对象，是不完整的，当尝试使用这个对象的时候就极有可能发生NPE异常。</strong></p>',9),n=[i];function r(c,p){return e(),o("div",null,n)}const h=t(a,[["render",r],["__file","volatile.html.vue"]]),m=JSON.parse('{"path":"/notebook/java/concurrence/volatile.html","title":"Volatile","lang":"zh-CN","frontmatter":{"title":"Volatile","author":null,"category":"Java","tag":"Java","date":"2023-12-11T00:00:00.000Z","description":"可见性 对于volatile变量，当对volatile变量进行写操作的时候，JVM会向处理器发送一条lock前缀的指令，将这个缓存中的变量回写到系统主存中。 所以，如果一个变量被volatile所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议( MESI)，也会把这个变量的值从主存加载到自己的缓存中。这...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/java/concurrence/volatile.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Volatile"}],["meta",{"property":"og:description","content":"可见性 对于volatile变量，当对volatile变量进行写操作的时候，JVM会向处理器发送一条lock前缀的指令，将这个缓存中的变量回写到系统主存中。 所以，如果一个变量被volatile所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议( MESI)，也会把这个变量的值从主存加载到自己的缓存中。这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T11:26:10.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-12-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T11:26:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Volatile\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T11:26:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"可见性","slug":"可见性","link":"#可见性","children":[]},{"level":2,"title":"有序性","slug":"有序性","link":"#有序性","children":[]}],"git":{"createdTime":1711452370000,"updatedTime":1711452370000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":1.46,"words":437},"filePathRelative":"notebook/java/concurrence/volatile.md","localizedDate":"2023年12月11日","excerpt":"<h2>可见性</h2>\\n<p>对于volatile变量，当对volatile变量进行写操作的时候，JVM会向处理器发送一条lock前缀的指令，将这个缓存中的变量回写到系统主存中。</p>\\n<p>所以，如果一个变量被volatile所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议(\\nMESI)，也会把这个变量的值从主存加载到自己的缓存中。这就保证了一个volatile在并发编程中，其值在多个缓存中是可见的。</p>\\n<h2>有序性</h2>\\n<p>volatile除了可以保证数据的可见性之外，还有一个强大的功能，那就是他可以<strong>禁止指令重排优化</strong>等。</p>","autoDesc":true}');export{h as comp,m as data};
