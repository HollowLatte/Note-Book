import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,e as s}from"./app-DNRIH2TH.js";const o={},a=s('<h2 id="redis是单线程" tabindex="-1"><a class="header-anchor" href="#redis是单线程"><span>Redis是单线程？</span></a></h2><p>实际上，Redis中只有网络请求模块和数据操作模块是单线程的。而其他的如持久化存储模块、集群支撑模块等是多线程的。 在6.0后，Redis的网络请求模块也使用了多线程，其实在4.0时对部分命令做了多线程化，如新增命令了unlink，实际上是del的异步版本</p><h2 id="为什么数据的操作模块设计成单线程的" tabindex="-1"><a class="header-anchor" href="#为什么数据的操作模块设计成单线程的"><span>为什么数据的操作模块设计成单线程的？</span></a></h2><p>多线程的目的，就是通过并发的方式来提升I/O的利用率和CPU的利用率。 Redis不需要提升CPU利用率，因为Redis的操作基本都是基于内存的，计算操作较少，CPU资源不是Redis的性能瓶颈。</p><p>那么为什么不用多线程来提升I/O利用率呢？ Redis确实是一个I/O操作密集的框架，他的数据操作过程中，会有大量的网络I/O和磁盘I/O的发生。要想提升Redis的性能，是一定要提升Redis的I/O利用率的，这一点毋庸置疑。</p><p>但是，提升I/O利用率，并不是只有采用多线程技术这一条路可以走！</p><h2 id="为什么单线程也能那么快" tabindex="-1"><a class="header-anchor" href="#为什么单线程也能那么快"><span>为什么单线程也能那么快？</span></a></h2><ol><li>基于内存</li><li>单线程模型：不需要进行线程切换和上下文切换。</li><li>多路复用 I/O 模型：采用了I/O 多路复用技术，实现了单个线程同时处理多个客户端连接的能力，从而提高了 Redis 的并发性能。</li><li>高效的数据结构：哈希表、有序集合、列表等，这些数据结构都被实现得非常高效，能够在 O(1) 的时间复杂度内完成数据读写操作，这也是 Redis 能够快速处理数据请求的重要因素之一。</li><li>多线程的引入：在Redis 6.0中引入了多线程的机制，使得网络处理的请求并发进行，就可以大大的提升性能。多线程除了可以减少由于网络 I/O 等待造成的影响，还可以充分利用 CPU 的多核优势。</li></ol><h2 id="_6-0为什么引入多线程" tabindex="-1"><a class="header-anchor" href="#_6-0为什么引入多线程"><span>6.0为什么引入多线程</span></a></h2><p>Redis 6.0中的多线程，只是针对处理网络请求过程采用了多线程，而数据的读写命令，仍然是单线程处理的。</p><p><strong>Redis不是号称单线程也有很高的性能吗？不是说IO多路复用已经大大提升了IO利用率吗？为什么还需要多线程？</strong></p><p>随着越来越复杂的业务场景，有些公司动不动就上亿的交易量，因此需要更大的 QPS。为了提升QPS，很多公司的做法是部署Redis集群，并且尽可能提升Redis机器数。但是这种做法的资源消耗是巨大的。</p><p>而经过分析，限制Redis的性能的主要瓶颈出现在网络IO的处理上，并且多路复用的IO模型本质上仍然是同步阻塞型IO模型。</p><p>在多路复用的IO模型中，在处理网络请求时，调用 select （其他函数同理）的过程是阻塞的，也就是说这个过程会阻塞线程，如果并发量很高，此处可能会成为瓶颈。</p><p>多线程除了可以减少由于网络 I/O 等待造成的影响，还可以充分利用 CPU 的多核优势。（网络IO中也需要用到CPU）</p><p><strong>会有并发问题吗？</strong></p><p>不会，因为数据读写的操作还是单线程来完成的</p>',17),l=[a];function n(r,d){return t(),i("div",null,l)}const c=e(o,[["render",n],["__file","why-use-single-thread.html.vue"]]),m=JSON.parse('{"path":"/interview-shorthand/redis/why-use-single-thread.html","title":"为什么使用单线程？","lang":"zh-CN","frontmatter":{"title":"为什么使用单线程？","author":null,"category":"Redis","tag":"Redis","description":"Redis是单线程？ 实际上，Redis中只有网络请求模块和数据操作模块是单线程的。而其他的如持久化存储模块、集群支撑模块等是多线程的。 在6.0后，Redis的网络请求模块也使用了多线程，其实在4.0时对部分命令做了多线程化，如新增命令了unlink，实际上是del的异步版本 为什么数据的操作模块设计成单线程的？ 多线程的目的，就是通过并发的方式来提...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/interview-shorthand/redis/why-use-single-thread.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"为什么使用单线程？"}],["meta",{"property":"og:description","content":"Redis是单线程？ 实际上，Redis中只有网络请求模块和数据操作模块是单线程的。而其他的如持久化存储模块、集群支撑模块等是多线程的。 在6.0后，Redis的网络请求模块也使用了多线程，其实在4.0时对部分命令做了多线程化，如新增命令了unlink，实际上是del的异步版本 为什么数据的操作模块设计成单线程的？ 多线程的目的，就是通过并发的方式来提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-27T18:36:54.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2024-03-27T18:36:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么使用单线程？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-27T18:36:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"Redis是单线程？","slug":"redis是单线程","link":"#redis是单线程","children":[]},{"level":2,"title":"为什么数据的操作模块设计成单线程的？","slug":"为什么数据的操作模块设计成单线程的","link":"#为什么数据的操作模块设计成单线程的","children":[]},{"level":2,"title":"为什么单线程也能那么快？","slug":"为什么单线程也能那么快","link":"#为什么单线程也能那么快","children":[]},{"level":2,"title":"6.0为什么引入多线程","slug":"_6-0为什么引入多线程","link":"#_6-0为什么引入多线程","children":[]}],"git":{"createdTime":1711564614000,"updatedTime":1711564614000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":3.05,"words":914},"filePathRelative":"interview-shorthand/redis/why-use-single-thread.md","localizedDate":"2024年3月27日","excerpt":"<h2>Redis是单线程？</h2>\\n<p>实际上，Redis中只有网络请求模块和数据操作模块是单线程的。而其他的如持久化存储模块、集群支撑模块等是多线程的。\\n在6.0后，Redis的网络请求模块也使用了多线程，其实在4.0时对部分命令做了多线程化，如新增命令了unlink，实际上是del的异步版本</p>\\n<h2>为什么数据的操作模块设计成单线程的？</h2>\\n<p>多线程的目的，就是通过并发的方式来提升I/O的利用率和CPU的利用率。\\nRedis不需要提升CPU利用率，因为Redis的操作基本都是基于内存的，计算操作较少，CPU资源不是Redis的性能瓶颈。</p>\\n<p>那么为什么不用多线程来提升I/O利用率呢？\\nRedis确实是一个I/O操作密集的框架，他的数据操作过程中，会有大量的网络I/O和磁盘I/O的发生。要想提升Redis的性能，是一定要提升Redis的I/O利用率的，这一点毋庸置疑。</p>","autoDesc":true}');export{c as comp,m as data};
