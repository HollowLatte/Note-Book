import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-BtuJf2rB.js";const t={},p=e(`<h2 id="什么是beanfactory" tabindex="-1"><a class="header-anchor" href="#什么是beanfactory"><span>什么是BeanFactory？</span></a></h2><p>BeanFactory 是 Spring 框架的核心接口，用于管理 Bean 的实例化和配置。它提供了一系列方法来创建、获取和管理 Bean 实例</p><p>其实在开发中可能会经常用到BeanFactory的几个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span>
    
    <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个方法可以从Spring容器中获取Bean。</p><p>实际应用中，其实很少直接用到BeanFactory，而是使用BeanFactory的实现类</p><p>如：<code>ApplicationContext</code>等等</p><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例"><span>使用案例</span></a></h2><p>通过实现<code>ApplicationContextAware</code>接口来获取<code>ApplicationContext</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringContextHolder</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringContextHolder</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="beanfactory和factorybean" tabindex="-1"><a class="header-anchor" href="#beanfactory和factorybean"><span>BeanFactory和FactoryBean</span></a></h2><p>BeanFactory是Spring容器的核心接口，用于管理和获取Bean实例， 而FactoryBean是Bean的一种特殊类型，用于创建那些需要特殊处理的Bean。BeanFactory是容器的接口，而FactoryBean是容器中的一个Bean</p>`,12),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","spring-beanfactory.html.vue"]]),d=JSON.parse('{"path":"/notebook/framework/spring-springboot/spring-beanfactory.html","title":"Spring BeanFactory","lang":"zh-CN","frontmatter":{"title":"Spring BeanFactory","author":null,"category":"Spring","tag":"Spring","date":"2024-03-26T00:00:00.000Z","description":"什么是BeanFactory？ BeanFactory 是 Spring 框架的核心接口，用于管理 Bean 的实例化和配置。它提供了一系列方法来创建、获取和管理 Bean 实例 其实在开发中可能会经常用到BeanFactory的几个方法： 上面两个方法可以从Spring容器中获取Bean。 实际应用中，其实很少直接用到BeanFactory，而是使用...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/framework/spring-springboot/spring-beanfactory.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Spring BeanFactory"}],["meta",{"property":"og:description","content":"什么是BeanFactory？ BeanFactory 是 Spring 框架的核心接口，用于管理 Bean 的实例化和配置。它提供了一系列方法来创建、获取和管理 Bean 实例 其实在开发中可能会经常用到BeanFactory的几个方法： 上面两个方法可以从Spring容器中获取Bean。 实际应用中，其实很少直接用到BeanFactory，而是使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T11:26:10.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T11:26:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring BeanFactory\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T11:26:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"什么是BeanFactory？","slug":"什么是beanfactory","link":"#什么是beanfactory","children":[]},{"level":2,"title":"使用案例","slug":"使用案例","link":"#使用案例","children":[]},{"level":2,"title":"BeanFactory和FactoryBean","slug":"beanfactory和factorybean","link":"#beanfactory和factorybean","children":[]}],"git":{"createdTime":1711452370000,"updatedTime":1711452370000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":0.86,"words":259},"filePathRelative":"notebook/framework/spring-springboot/spring-beanfactory.md","localizedDate":"2024年3月26日","excerpt":"<h2>什么是BeanFactory？</h2>\\n<p>BeanFactory 是 Spring 框架的核心接口，用于管理 Bean 的实例化和配置。它提供了一系列方法来创建、获取和管理 Bean 实例</p>\\n<p>其实在开发中可能会经常用到BeanFactory的几个方法：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">BeanFactory</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">T</span> <span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Class</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> requiredType<span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
