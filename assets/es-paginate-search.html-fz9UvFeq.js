import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o,c,a as e,d as t,b as s,e as n}from"./app-R-jbemKs.js";const h={},i=e("h2",{id:"官方文档",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#官方文档","aria-hidden":"true"},"#"),t(" 官方文档")],-1),l={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#paginate-search-results",target:"_blank",rel:"noopener noreferrer"},_=n('<h2 id="分页方式对比" tabindex="-1"><a class="header-anchor" href="#分页方式对比" aria-hidden="true">#</a> 分页方式对比</h2><table><thead><tr><th>分页方式</th><th>简述</th><th>缺点</th></tr></thead><tbody><tr><td>From&amp;Size</td><td>浅分页情况下，可以考虑使用；</td><td>● 默认大小限制<br> ● 深度分页情况下，性能较差</td></tr><tr><td>Scroll(官方不推荐)</td><td>基于历史快照和上一页的scroll_id，查询下一页；</td><td>● 快照比较占内存<br>● 不适合实时搜索和跳页需求</td></tr><tr><td>Search After(官方推荐)</td><td>1. 需要排序，官方（<code>5.6版本</code>）推荐使用 <strong>_uid</strong> 作为排序字段和全局唯一值（注：不同版本的ES，官方文档有变动，请参考对应版本的文档。比如，<code>7.x版本</code>建议拷贝<code>_id</code>字段值到另外一个支持<code>doc value</code>的字段，用于作为排序字段）； <br>2. 通过<strong>实时cursor</strong>来规避耗时和占存储的性能问题，基于上一页的结果帮助检索下一页； <br>3. 使用search_after参数时，from的值必须为0或者-1</td><td>● 需要排序<br> ● 不适合跳页需求</td></tr></tbody></table>',2);function f(u,m){const r=d("ExternalLinkIcon");return o(),c("div",null,[i,e("p",null,[e("a",l,[t("Paginate search results"),s(r)])]),_])}const g=a(h,[["render",f],["__file","es-paginate-search.html.vue"]]);export{g as default};
