const a=JSON.parse('{"key":"v-724c6d25","path":"/practice-manual/jvm/tool/jps.html","title":"jps命令","lang":"zh-CN","frontmatter":{"title":"jps命令","author":null,"category":"JVM","tag":"JVM","description":"原理 jps命令可以显示当前运行的java进程以及相关参数，它的实现机制如下： java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_ {userName}/），有几个文件，名字就是java进程的pid，因此列出当前运行的java进程，只是把这个目录里的文件名列一下而已。 至于系统的参数什么，就可以解析这几个文件获得。 使用 # 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名 jps -l # 输出传递给JVM的参数 jps -v # 输出传递给main 方法的参数 jps -m # 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数 jps -q","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/jvm/tool/jps.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"jps命令"}],["meta",{"property":"og:description","content":"原理 jps命令可以显示当前运行的java进程以及相关参数，它的实现机制如下： java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_ {userName}/），有几个文件，名字就是java进程的pid，因此列出当前运行的java进程，只是把这个目录里的文件名列一下而已。 至于系统的参数什么，就可以解析这几个文件获得。 使用 # 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名 jps -l # 输出传递给JVM的参数 jps -v # 输出传递给main 方法的参数 jps -m # 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数 jps -q"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"JVM"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jps命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{},"readingTime":{"minutes":0.79,"words":237},"filePathRelative":"practice-manual/jvm/tool/jps.md","excerpt":"<h2> 原理</h2>\\n<p>jps命令可以显示当前运行的java进程以及相关参数，它的实现机制如下：</p>\\n<p>java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_\\n{userName}/），有几个文件，名字就是java进程的pid，因此列出当前运行的java进程，只是把这个目录里的文件名列一下而已。\\n至于系统的参数什么，就可以解析这几个文件获得。</p>\\n<h2> 使用</h2>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</span>\\njps <span class=\\"token parameter variable\\">-l</span>\\n\\n<span class=\\"token comment\\"># 输出传递给JVM的参数</span>\\njps <span class=\\"token parameter variable\\">-v</span>\\n\\n<span class=\\"token comment\\"># 输出传递给main 方法的参数</span>\\njps <span class=\\"token parameter variable\\">-m</span>\\n\\n<span class=\\"token comment\\"># 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数</span>\\njps <span class=\\"token parameter variable\\">-q</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
