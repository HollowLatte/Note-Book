import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e as i}from"./app-R-jbemKs.js";const d={},l=i(`<h2 id="命令说明" tabindex="-1"><a class="header-anchor" href="#命令说明" aria-hidden="true">#</a> 命令说明</h2><ul><li>XACK：结束Pending，将消息标记为&quot;已处理&quot;</li><li>XADD：生成消息</li><li>XCLAIM：转移消息的归属权</li><li>XDEL：删除消息</li><li>XGROUP：消费组管理</li><li>XINFO：查看流和消费者组的相关信息</li><li>XLEN：消息队列长度</li><li>XPENDING：Pending列表，显示待处理消息的相关信息</li><li>XRANGE：获取消息队列中消息</li><li>XREAD：消费消息</li><li>XREADGROUP：分组消费消息</li><li>XREVRANGE：逆序获取消息队列中消息</li><li>XTRIM：消息队列容量</li></ul><h2 id="quickstart-无消费组" tabindex="-1"><a class="header-anchor" href="#quickstart-无消费组" aria-hidden="true">#</a> QuickStart-无消费组</h2><h3 id="创建stream" tabindex="-1"><a class="header-anchor" href="#创建stream" aria-hidden="true">#</a> 创建Stream</h3><p>首次添加消息时，自动创建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xadd stream_key * key1 value1 key2 value2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>*</code>：表示Redis自动生成消息ID</li><li><code>key1 value1 key2 value2</code>：表示一条消息的消息体内的key-value对</li></ul><blockquote><p>生成的消息ID的格式为毫秒时间戳+序号</p></blockquote><h3 id="查看stream信息" tabindex="-1"><a class="header-anchor" href="#查看stream信息" aria-hidden="true">#</a> 查看Stream信息</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xinfo stream stream_key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="读取stream消息" tabindex="-1"><a class="header-anchor" href="#读取stream消息" aria-hidden="true">#</a> 读取Stream消息</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xread count <span class="token number">10</span> streams stream_key1 <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>count 10</code>：表示读取的消息数量</li><li><code>streams stream_key1</code>：表示读取的stream名称，可以指定多个stream，用空格分隔。如<code>streams stream_key1 stream_key2</code></li><li><code>0</code>：表示要读取消息的起始ID，读取该起始ID之后的消息。另外有几个特殊值，如这里的<code>0</code>，代表从最旧的消息开始读(包括最旧的那条)</li></ul><h3 id="阻塞读取stream消息" tabindex="-1"><a class="header-anchor" href="#阻塞读取stream消息" aria-hidden="true">#</a> 阻塞读取Stream消息</h3><p>阻塞读取时，若读取不到内容，则阻塞等待；若读取到消息或达到阻塞时间，则不再阻塞，如还需阻塞读取，需要再次调用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xread block <span class="token number">0</span> count <span class="token number">10</span> streams stream_key1 $
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>xread 如果不设置block参数，默认是非阻塞模式。</p></blockquote><p>参数说明：</p><ul><li><code>block 0</code>：block参数的单位是毫秒，block 0代表的是永远阻塞。</li><li><code>$</code>：表示是ID的一个特殊值，表示读取最新消息。<code>$</code>只有在阻塞模式中生效，非阻塞模式下，<code>$</code>无法读取到消息</li></ul>`,21),r=[l];function n(c,t){return a(),s("div",null,r)}const m=e(d,[["render",n],["__file","stream-command.html.vue"]]);export{m as default};
