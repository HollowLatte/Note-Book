import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as t}from"./app-lFGRJO1c.js";const s={},o=t(`<h2 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引"><span>覆盖索引</span></a></h2><p>覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。</p><h3 id="如何知道是否使用了覆盖索引" tabindex="-1"><a class="header-anchor" href="#如何知道是否使用了覆盖索引"><span>如何知道是否使用了覆盖索引？</span></a></h3><p>查看EXPLAIN的输出。如果Extra列显示为“Using index”，那么就表示查询使用了覆盖索引</p><h2 id="索引下推" tabindex="-1"><a class="header-anchor" href="#索引下推"><span>索引下推</span></a></h2><p>索引下推(index push down)是 MySQL 5.6引入了一种优化技术，默认开启，索引下推可以认为是解决索引失效带来的效率低的问题的一种手段。</p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例</span></a></h3><p>现在t_user表有联合索引(name,age)</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span>  <span class="token keyword">from</span> t_user <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;L%&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据最左前缀原则。如果查询中的第一个条件（在这里是name字段）使用了范围查询（LIKE &#39; L%&#39;就是一个范围查询），那么它后面的所有索引字段（在这里是age字段）都无法被利用。所以是使用了索引，但是没有利用好索引</p><p><strong>不用索引下推的执行过程：</strong></p><ol><li>利用索引找出name带&#39;L&#39;的数据行：LiLei、Lili、Lisa、Lucy 这四条索引数据</li><li>再根据这四条索引数据中的 id 值，逐一进行回表扫描，从聚簇索引中找到相应的行数据，将找到的行数据返回给MySQL服务端。</li><li>在MySQL服务端判断age = 17,进行筛选，最终只留下 Lucy 用户的数据信息。</li></ol><p><strong>使用索引下推的执行过程：</strong></p><ol><li>利用索引找出name带&#39;L&#39;的数据行：LiLei、Lili、Lisa、Lucy 这四条索引数据</li><li>根据 age = 17 这个条件，对四条索引数据进行判断筛选，最终只留下 Lucy 用户的数据信息。 （注意：这一步不是直接进行回表操作，而是根据 age = 17 这个条件，对四条索引数据进行判断筛选）</li><li>将符合条件的索引对应的 id 进行回表扫描，最终将找到的行数据返回给MySQL服务端。</li></ol><p>比较两种执行过程，可以发现索引下推的方式极大的减少了回表次数</p><h3 id="如何知道是否使用了索引下推" tabindex="-1"><a class="header-anchor" href="#如何知道是否使用了索引下推"><span>如何知道是否使用了索引下推？</span></a></h3><p>当一条SQL使用到索引下推时，explain的执行计划中的extra字段中内容为：Using index condition</p><h3 id="如何开启-关闭" tabindex="-1"><a class="header-anchor" href="#如何开启-关闭"><span>如何开启/关闭</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 关闭索引下推</span>
<span class="token keyword">set</span> optimizer_switch<span class="token operator">=</span><span class="token string">&#39;index_condition_pushdown=off&#39;</span><span class="token punctuation">;</span> 
<span class="token comment">-- 开启索引下推</span>
<span class="token keyword">set</span> optimizer_switch<span class="token operator">=</span><span class="token string">&#39;index_condition_pushdown=on&#39;</span><span class="token punctuation">;</span>		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),i=[o];function l(p,r){return n(),a("div",null,i)}const h=e(s,[["render",l],["__file","index-pushdown.html.vue"]]),m=JSON.parse('{"path":"/notebook/mysql/index/index-pushdown.html","title":"覆盖索引和索引下推","lang":"zh-CN","frontmatter":{"title":"覆盖索引和索引下推","author":null,"category":"MySQL","tag":"MySQL","description":"覆盖索引 覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。 如何知道是否使用了覆盖索引？ 查看EXPLAIN的输出。如果Extra列显示为“Using index”，那么就表示查询使用了覆盖索引 索引下推 索引下推(index push down)是 MySQL 5.6...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/notebook/mysql/index/index-pushdown.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"覆盖索引和索引下推"}],["meta",{"property":"og:description","content":"覆盖索引 覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。 如何知道是否使用了覆盖索引？ 查看EXPLAIN的输出。如果Extra列显示为“Using index”，那么就表示查询使用了覆盖索引 索引下推 索引下推(index push down)是 MySQL 5.6..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T18:41:05.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2024-03-26T18:41:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"覆盖索引和索引下推\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T18:41:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"覆盖索引","slug":"覆盖索引","link":"#覆盖索引","children":[{"level":3,"title":"如何知道是否使用了覆盖索引？","slug":"如何知道是否使用了覆盖索引","link":"#如何知道是否使用了覆盖索引","children":[]}]},{"level":2,"title":"索引下推","slug":"索引下推","link":"#索引下推","children":[{"level":3,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":3,"title":"如何知道是否使用了索引下推？","slug":"如何知道是否使用了索引下推","link":"#如何知道是否使用了索引下推","children":[]},{"level":3,"title":"如何开启/关闭","slug":"如何开启-关闭","link":"#如何开启-关闭","children":[]}]}],"git":{"createdTime":1711478465000,"updatedTime":1711478465000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"notebook/mysql/index/index-pushdown.md","localizedDate":"2024年3月26日","excerpt":"<h2>覆盖索引</h2>\\n<p>覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。</p>\\n<h3>如何知道是否使用了覆盖索引？</h3>\\n<p>查看EXPLAIN的输出。如果Extra列显示为“Using index”，那么就表示查询使用了覆盖索引</p>\\n<h2>索引下推</h2>\\n<p>索引下推(index push down)是 MySQL 5.6引入了一种优化技术，默认开启，索引下推可以认为是解决索引失效带来的效率低的问题的一种手段。</p>\\n<h3>举例</h3>\\n<p>现在t_user表有联合索引(name,age)</p>","autoDesc":true}');export{h as comp,m as data};
