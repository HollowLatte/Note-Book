import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as d,c as o,a as e,d as a,b as s,e as n}from"./app-R-jbemKs.js";const p={},l=n('<h2 id="stream-与-mq" tabindex="-1"><a class="header-anchor" href="#stream-与-mq" aria-hidden="true">#</a> Stream 与 MQ</h2><p>Redis Stream是 Redis 5.0 引入的一种数据结构，用于消息队列的持久化和主备复制。</p><p>在Redis5.0之前，如果用redis来模拟MQ功能，通常使用list或PUB/SUB发布订阅模式。</p><p>Stream 具有完善的MQ功能：</p><ol><li>消息持久化存储，持久化保存消息数据，确保消息在存储中的可靠性和持久性。即使 Redis 服务器重启，消息仍然可以保留，避免数据丢失。</li><li>提供了消费者组功能。类似Kafka与RocketMQ的消费组</li><li>消费确认ack机制。</li></ol><h3 id="pub-sub模式" tabindex="-1"><a class="header-anchor" href="#pub-sub模式" aria-hidden="true">#</a> pub/sub模式</h3><p>消息发布之后，主动推送消息到订阅的客户端。</p><p>优点：简单快速 缺点：一旦redis服务或者消费者重启，那么会丢失在重启的这段时间之内所有的消息，因为Redis没有持久化这种模式的缓存，只是做了内存缓冲区 + 消息转发</p><p>可以通过Redission的getTopic 获取一个pubsub通道</p><h3 id="list方式" tabindex="-1"><a class="header-anchor" href="#list方式" aria-hidden="true">#</a> list方式</h3><p>list的方式是stream出现之前可靠度比较高的实现</p><p>使用bpop来阻塞等待消息</p><p>优点：</p><ul><li>rdb或者aof可以在一定范围内降低消息丢失率。如果消费者重启，可以从之前消费的进度继续读取数据</li><li>使用bpop指令阻塞等待消息，不用一直轮询，降低网络交互产生的IO损耗。</li></ul><p>缺点：没有真正具备MQ的功能，如消息确认机制、消费者组等</p><p>可以通过Redission的getQueue 获取一个队列</p><h2 id="stream-数据格式" tabindex="-1"><a class="header-anchor" href="#stream-数据格式" aria-hidden="true">#</a> Stream 数据格式</h2><p>Stream 在Redis的存储结构类似与Redis中的Hash</p><p>Stream的一条消息中包含消息id和消息体</p><p>消息ID称为<code>StreamMessageId</code>：格式为<code>毫秒时间戳+序号</code>，如1706162668568-0，高位是毫秒级时间戳，低位是递增变量，用来标记唯一一条消息。 消息体为key-value的格式</p><h2 id="stream-相关文档" tabindex="-1"><a class="header-anchor" href="#stream-相关文档" aria-hidden="true">#</a> Stream 相关文档</h2>',21),c={href:"https://redis.io/docs/data-types/streams/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/redisson/redisson/wiki/7.-distributed-collections/#720-stream",target:"_blank",rel:"noopener noreferrer"};function m(u,_){const r=i("ExternalLinkIcon");return d(),o("div",null,[l,e("p",null,[a("Redis Stream 官方文档："),e("a",c,[a("Redis Streams"),s(r)])]),e("p",null,[a("Redisson Stream API 文档："),e("a",h,[a("Redisson Stream API"),s(r)])])])}const R=t(p,[["render",m],["__file","stream-mq.html.vue"]]);export{R as default};
