const n=JSON.parse(`{"key":"v-5858a6ae","path":"/notebook/redis/redisson/distributed-lock-source-code.html","title":"Redisson 分布式锁源码","lang":"zh-CN","frontmatter":{"title":"Redisson 分布式锁源码","author":null,"category":"Redis","tag":"Redis","date":"2024-03-06T00:00:00.000Z","description":"Redisson的不同版本代码有所区别，此处源码是org.redisson:redisson:3.24.2 分布式锁核心代码 org.redisson.RedissonLock#tryLockInnerAsync &lt;T&gt; RFuture&lt;T&gt; tryLockInnerAsync(long waitTime, long leaseTime, TimeUnit unit, long threadId, RedisStrictCommand&lt;T&gt; command) { return evalWriteAsync(getRawName(), LongCodec.INSTANCE, command, \\"if ((redis.call('exists', KEYS[1]) == 0) \\" + \\"or (redis.call('hexists', KEYS[1], ARGV[2]) == 1)) then \\" + \\"redis.call('hincrby', KEYS[1], ARGV[2], 1); \\" + \\"redis.call('pexpire', KEYS[1], ARGV[1]); \\" + \\"return nil; \\" + \\"end; \\" + \\"return redis.call('pttl', KEYS[1]);\\", Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId)); }","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/redis/redisson/distributed-lock-source-code.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Redisson 分布式锁源码"}],["meta",{"property":"og:description","content":"Redisson的不同版本代码有所区别，此处源码是org.redisson:redisson:3.24.2 分布式锁核心代码 org.redisson.RedissonLock#tryLockInnerAsync &lt;T&gt; RFuture&lt;T&gt; tryLockInnerAsync(long waitTime, long leaseTime, TimeUnit unit, long threadId, RedisStrictCommand&lt;T&gt; command) { return evalWriteAsync(getRawName(), LongCodec.INSTANCE, command, \\"if ((redis.call('exists', KEYS[1]) == 0) \\" + \\"or (redis.call('hexists', KEYS[1], ARGV[2]) == 1)) then \\" + \\"redis.call('hincrby', KEYS[1], ARGV[2], 1); \\" + \\"redis.call('pexpire', KEYS[1], ARGV[1]); \\" + \\"return nil; \\" + \\"end; \\" + \\"return redis.call('pttl', KEYS[1]);\\", Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId)); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-03-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redisson 分布式锁源码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"分布式锁核心代码","slug":"分布式锁核心代码","link":"#分布式锁核心代码","children":[{"level":3,"title":"Lua脚本解释","slug":"lua脚本解释","link":"#lua脚本解释","children":[]},{"level":3,"title":"锁超时时间","slug":"锁超时时间","link":"#锁超时时间","children":[]}]},{"level":2,"title":"Watchdog看门狗核心代码","slug":"watchdog看门狗核心代码","link":"#watchdog看门狗核心代码","children":[{"level":3,"title":"锁续期实现","slug":"锁续期实现","link":"#锁续期实现","children":[]},{"level":3,"title":"锁续期Lua脚本","slug":"锁续期lua脚本","link":"#锁续期lua脚本","children":[]}]}],"git":{},"readingTime":{"minutes":3.6,"words":1081},"filePathRelative":"notebook/redis/redisson/distributed-lock-source-code.md","localizedDate":"2024年3月6日","excerpt":"<p>Redisson的不同版本代码有所区别，此处源码是<code>org.redisson:redisson:3.24.2</code></p>\\n<h2> 分布式锁核心代码</h2>\\n<p>org.redisson.RedissonLock#tryLockInnerAsync</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">RFuture</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">tryLockInnerAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span> waitTime<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">long</span> leaseTime<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span> unit<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">long</span> threadId<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">RedisStrictCommand</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> command<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">evalWriteAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getRawName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">LongCodec</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">INSTANCE</span><span class=\\"token punctuation\\">,</span> command<span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token string\\">\\"if ((redis.call('exists', KEYS[1]) == 0) \\"</span> <span class=\\"token operator\\">+</span>\\n                        <span class=\\"token string\\">\\"or (redis.call('hexists', KEYS[1], ARGV[2]) == 1)) then \\"</span> <span class=\\"token operator\\">+</span>\\n                    <span class=\\"token string\\">\\"redis.call('hincrby', KEYS[1], ARGV[2], 1); \\"</span> <span class=\\"token operator\\">+</span>\\n                    <span class=\\"token string\\">\\"redis.call('pexpire', KEYS[1], ARGV[1]); \\"</span> <span class=\\"token operator\\">+</span>\\n                    <span class=\\"token string\\">\\"return nil; \\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"end; \\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"return redis.call('pttl', KEYS[1]);\\"</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token class-name\\">Collections</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">singletonList</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getRawName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> unit<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toMillis</span><span class=\\"token punctuation\\">(</span>leaseTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">getLockName</span><span class=\\"token punctuation\\">(</span>threadId<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
