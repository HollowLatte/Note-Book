import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,e as n}from"./app-BGUJa96a.js";const s={},o=n(`<h2 id="不要使用keys" tabindex="-1"><a class="header-anchor" href="#不要使用keys"><span>不要使用keys</span></a></h2><p>KEYS 命令在 Redis 中是阻塞的，它会一次性返回与给定模式匹配的所有键。如果 Redis 数据库非常大，或者匹配的键数量庞大，使用 KEYS 命令可能会阻塞服务器并导致性能问题。此外，由于 KEYS 命令的执行是阻塞的，其他客户端的请求也会被延迟。</p><h2 id="推荐使用scan" tabindex="-1"><a class="header-anchor" href="#推荐使用scan"><span>推荐使用scan</span></a></h2><p>SCAN 命令使用游标方式迭代 Redis 键空间，允许逐步获取匹配模式的键。这样可以将工作分散到多个迭代中，减少对服务器的阻塞时间，并且不会导致性能问题。 使用 SCAN 命令可以更好地处理大型数据库和大量键的情况，并且对于生产环境更加安全。</p><p>语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>SCAN cursor <span class="token punctuation">[</span>MATCH pattern<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>SCAN <span class="token number">0</span> match <span class="token string">&quot;cache:*&quot;</span> count <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>SCAN 命令将返回一个包含两个元素的数组： 第一个元素是下一个迭代的游标，第二个元素是与pattern匹配的键。 可以使用返回的游标来进行下一次迭代，直到返回的游标为 0，表示迭代完成。</p><h2 id="scan的问题" tabindex="-1"><a class="header-anchor" href="#scan的问题"><span>scan的问题</span></a></h2><ul><li><p><strong>可能会产生重复键</strong>：在某些情况下，SCAN 命令可能会返回重复的键。这是因为在迭代过程中有新的键被添加或删除，而新键的添加或删除可能导致某些键被返回多次。</p></li><li><p><strong>迭代过程可能不是实时的</strong>：SCAN 命令使用游标方式迭代键空间，这意味着在多次迭代之间可能会有新的键被添加或删除。因此，如果在迭代过程中有新的键被添加或删除，那么这些新键可能会在当前迭代中被忽略，需要等到下一次迭代才能获取到。这可能导致在某些情况下无法实时获取到最新的键集合。</p></li><li><p><strong>可能会产生重复键</strong>：在某些情况下，SCAN 命令可能会返回重复的键。这是因为在迭代过程中有新的键被添加或删除，而新键的添加或删除可能导致某些键被返回多次。为了解决这个问题，应用程序需要在客户端端进行去重操作。</p></li></ul>`,11),i=[o];function c(l,r){return t(),a("div",null,i)}const h=e(s,[["render",c],["__file","find-key.html.vue"]]),m=JSON.parse('{"path":"/practice-manual/redis/command/find-key.html","title":"查找key","lang":"zh-CN","frontmatter":{"title":"查找key","author":null,"category":"Redis","tag":"Redis","description":"不要使用keys KEYS 命令在 Redis 中是阻塞的，它会一次性返回与给定模式匹配的所有键。如果 Redis 数据库非常大，或者匹配的键数量庞大，使用 KEYS 命令可能会阻塞服务器并导致性能问题。此外，由于 KEYS 命令的执行是阻塞的，其他客户端的请求也会被延迟。 推荐使用scan SCAN 命令使用游标方式迭代 Redis 键空间，允许逐步...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/practice-manual/redis/command/find-key.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"查找key"}],["meta",{"property":"og:description","content":"不要使用keys KEYS 命令在 Redis 中是阻塞的，它会一次性返回与给定模式匹配的所有键。如果 Redis 数据库非常大，或者匹配的键数量庞大，使用 KEYS 命令可能会阻塞服务器并导致性能问题。此外，由于 KEYS 命令的执行是阻塞的，其他客户端的请求也会被延迟。 推荐使用scan SCAN 命令使用游标方式迭代 Redis 键空间，允许逐步..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T19:10:17.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2024-03-26T19:10:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"查找key\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T19:10:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"不要使用keys","slug":"不要使用keys","link":"#不要使用keys","children":[]},{"level":2,"title":"推荐使用scan","slug":"推荐使用scan","link":"#推荐使用scan","children":[]},{"level":2,"title":"scan的问题","slug":"scan的问题","link":"#scan的问题","children":[]}],"git":{"createdTime":1711480217000,"updatedTime":1711480217000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":1.98,"words":595},"filePathRelative":"practice-manual/redis/command/find-key.md","localizedDate":"2024年3月26日","excerpt":"<h2>不要使用keys</h2>\\n<p>KEYS 命令在 Redis 中是阻塞的，它会一次性返回与给定模式匹配的所有键。如果 Redis 数据库非常大，或者匹配的键数量庞大，使用 KEYS\\n命令可能会阻塞服务器并导致性能问题。此外，由于 KEYS 命令的执行是阻塞的，其他客户端的请求也会被延迟。</p>\\n<h2>推荐使用scan</h2>\\n<p>SCAN 命令使用游标方式迭代 Redis 键空间，允许逐步获取匹配模式的键。这样可以将工作分散到多个迭代中，减少对服务器的阻塞时间，并且不会导致性能问题。\\n使用 SCAN 命令可以更好地处理大型数据库和大量键的情况，并且对于生产环境更加安全。</p>","autoDesc":true}');export{h as comp,m as data};
