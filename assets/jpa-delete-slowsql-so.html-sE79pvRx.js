import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-4HbIzINy.js";const e={},p=t(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>MySQL有一张表存放一些第三方应用的回调事件，例如ZOOM的会议回调事件、腾讯会议的会议相关事件</p><p>该表数据行数有时能达百万级</p><blockquote><p><strong>JDK版本：</strong> 13</p></blockquote><blockquote><p><strong>JPA的版本：</strong> <code>org.springframework.boot:spring-boot-starter-data-jpa:3.1.5</code></p></blockquote><h2 id="问题现象" tabindex="-1"><a class="header-anchor" href="#问题现象"><span>问题现象</span></a></h2><p>出现栈溢出问题的堆栈：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>java.lang.StackOverflowError
	at java.base/java.lang.Class.newInstance(Class.java:590)
	at org.hibernate.hql.internal.ast.SqlASTFactory.create(SqlASTFactory.java:249)
	at antlr.ASTFactory.create(ASTFactory.java:153)
	at antlr.ASTFactory.create(ASTFactory.java:186)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2080)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)
	...省略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外从发生OOM的堆栈信息附近的异常中，发现代码中使用了JPA中提供的<code>deleteInBatch(Iterable&lt;T&gt; entities)</code>方法</p><h2 id="可能原因" tabindex="-1"><a class="header-anchor" href="#可能原因"><span>可能原因</span></a></h2><p>一开始根本想不到</p><h2 id="原因分析" tabindex="-1"><a class="header-anchor" href="#原因分析"><span>原因分析</span></a></h2><p>深入源码后，发现该方法很多坑，不仅会栈溢出，还会有慢SQL问题</p><h3 id="慢sql问题" tabindex="-1"><a class="header-anchor" href="#慢sql问题"><span>慢SQL问题</span></a></h3><p>查看JPA源码，发现<code>deleteInBatch(Iterable&lt;T&gt; entities)</code> 实际上调用的是<code>SimpleJpaRepository.deleteInBatch(Iterable&lt;T&gt; entities)</code></p><p>具体代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteInBatch</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entities<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>entities<span class="token punctuation">,</span> <span class="token string">&quot;Entities must not be null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entities<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">applyAndBind</span><span class="token punctuation">(</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token constant">DELETE_ALL_QUERY_STRING</span><span class="token punctuation">,</span> entityInformation<span class="token punctuation">.</span><span class="token function">getEntityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entities<span class="token punctuation">,</span> em<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>applyAndBind是关键方法，继续进入</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Query</span> <span class="token function">applyAndBind</span><span class="token punctuation">(</span><span class="token class-name">String</span> queryString<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entities<span class="token punctuation">,</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...省略</span>
    <span class="token class-name">String</span> alias <span class="token operator">=</span> <span class="token function">detectAlias</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; where&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot; %s = ?%d&quot;</span><span class="token punctuation">,</span> alias<span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; or&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Query</span> query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看上面的代码，可以发现是在拼接SQL语句，重点来了，它每个where条件间是用or拼接的，可能会使索引失效，从而产生慢SQL</p><p>拼接出来的语句大概是这样<code>delete from [table_name] where [criteria] = id or [criteria] = id ...</code></p><h3 id="stackoverflow栈溢出问题" tabindex="-1"><a class="header-anchor" href="#stackoverflow栈溢出问题"><span>StackOverflow栈溢出问题</span></a></h3><p>查看出现栈溢出的堆栈信息，发现一直在调用一个方法<code>org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2088)</code></p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">logicalExpr</span><span class="token punctuation">(</span><span class="token class-name">AST</span> _t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RecognitionException</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...省略</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// for error handling</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_t<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> _t<span class="token operator">=</span><span class="token constant">ASTNULL</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span> _t<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">AND</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// ...省略</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token constant">OR</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">AST</span> __t376 <span class="token operator">=</span> _t<span class="token punctuation">;</span>
                <span class="token class-name">AST</span> tmp24_AST <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token class-name">AST</span> tmp24_AST_in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                tmp24_AST <span class="token operator">=</span> astFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">AST</span><span class="token punctuation">)</span>_t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对应logicalExpr(HqlSqlBaseWalker.java:2080)</span>
                tmp24_AST_in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">AST</span><span class="token punctuation">)</span>_t<span class="token punctuation">;</span>
                astFactory<span class="token punctuation">.</span><span class="token function">addASTChild</span><span class="token punctuation">(</span>currentAST<span class="token punctuation">,</span> tmp24_AST<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ASTPair</span> __currentAST376 <span class="token operator">=</span> currentAST<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                currentAST<span class="token punctuation">.</span>root <span class="token operator">=</span> currentAST<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
                currentAST<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token function">match</span><span class="token punctuation">(</span>_t<span class="token punctuation">,</span><span class="token constant">OR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                _t <span class="token operator">=</span> _t<span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">logicalExpr</span><span class="token punctuation">(</span>_t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对应logicalExpr(HqlSqlBaseWalker.java:2088)</span>
                _t <span class="token operator">=</span> _retTree<span class="token punctuation">;</span>
                astFactory<span class="token punctuation">.</span><span class="token function">addASTChild</span><span class="token punctuation">(</span>currentAST<span class="token punctuation">,</span> returnAST<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">logicalExpr</span><span class="token punctuation">(</span>_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                _t <span class="token operator">=</span> _retTree<span class="token punctuation">;</span>
                astFactory<span class="token punctuation">.</span><span class="token function">addASTChild</span><span class="token punctuation">(</span>currentAST<span class="token punctuation">,</span> returnAST<span class="token punctuation">)</span><span class="token punctuation">;</span>
                currentAST <span class="token operator">=</span> __currentAST376<span class="token punctuation">;</span>
                _t <span class="token operator">=</span> __t376<span class="token punctuation">;</span>
                _t <span class="token operator">=</span> _t<span class="token punctuation">.</span><span class="token function">getNextSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logicalExpr_AST <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">AST</span><span class="token punctuation">)</span>currentAST<span class="token punctuation">.</span>root<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码已经标记了与异常堆栈中对应的行数。<strong>可以发现<code>logicalExpr(HqlSqlBaseWalker.java:2088)</code> 这里发生了递归，为什么要用递归呢？JPA的代码水平就这样吗？</strong></p><p>去查阅相关资料后发现这里的递归是有原因的</p><p>logicalExpr方法是一个递归下降解析器的一部分，主要用于解析逻辑表达式并构建对应的抽象语法树（AST），递归结构设计用于处理嵌套的逻辑表达式，例如<code>A AND B OR C</code>或<code>NOT (A &gt; B)</code> 等。在解析过程中，函数会根据当前遇到的逻辑运算符或比较运算符调用自身来处理子表达式， <strong>对于解析逻辑表达式这样的场景，递归是一种非常自然且有效的解决方案</strong>，如果使用非递归方式，比如使用栈来模拟递归调用的过程，但这通常会使代码变得更为复杂</p><p>所以，当<code>deleteInBatch(Iterable&lt;T&gt; entities)</code>的参数过大时，解析逻辑表达式递归的次数也就越多，当超过栈大小时，就会导致栈溢出了</p><h2 id="问题原因" tabindex="-1"><a class="header-anchor" href="#问题原因"><span>问题原因</span></a></h2><p>通过上面的原因分析就可以知道</p><p><strong>慢SQL问题原因：</strong> JPA拼接delete语句时，where条件之间用的是or，可能会使索引失效，出现慢SQL</p><p><strong>StackOverflow栈溢出问题原因：</strong> JPA提供给用户使用的那些方法中是带有占位符与逻辑表达式的。JPA执行那些方法时，会进行解析逻辑表达式的操作，解析逻辑表达式的过程有递归操作，当参数过多时就会导致栈溢出</p><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h2><ul><li>不要使用JPA提供的方法，自己通过 <strong>@Query</strong> 来写delete语句</li><li>如果硬要使用JPA提供的delete方法，一次传的参数不要太多，参数量&lt;=1000一般是没问题的（最好别用JPA提供的相关delete方法，哦不，最好别用JPA🫵）</li></ul>`,35),l=[p];function o(c,i){return a(),s("div",null,l)}const d=n(e,[["render",o],["__file","jpa-delete-slowsql-so.html.vue"]]),k=JSON.parse('{"path":"/problem/backend-problem/product-env-problem/jpa-delete-slowsql-so.html","title":"JPA批量删除导致栈溢出SO与慢SQL","lang":"zh-CN","frontmatter":{"title":"JPA批量删除导致栈溢出SO与慢SQL","author":null,"category":"JPA","tag":"JPA","date":"2024-03-20T00:00:00.000Z","description":"背景 MySQL有一张表存放一些第三方应用的回调事件，例如ZOOM的会议回调事件、腾讯会议的会议相关事件 该表数据行数有时能达百万级 JDK版本： 13 JPA的版本： org.springframework.boot:spring-boot-starter-data-jpa:3.1.5 问题现象 出现栈溢出问题的堆栈： 另外从发生OOM的堆栈信息附近...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/problem/backend-problem/product-env-problem/jpa-delete-slowsql-so.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"JPA批量删除导致栈溢出SO与慢SQL"}],["meta",{"property":"og:description","content":"背景 MySQL有一张表存放一些第三方应用的回调事件，例如ZOOM的会议回调事件、腾讯会议的会议相关事件 该表数据行数有时能达百万级 JDK版本： 13 JPA的版本： org.springframework.boot:spring-boot-starter-data-jpa:3.1.5 问题现象 出现栈溢出问题的堆栈： 另外从发生OOM的堆栈信息附近..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:40:23.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"JPA"}],["meta",{"property":"article:published_time","content":"2024-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:40:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JPA批量删除导致栈溢出SO与慢SQL\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T15:40:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"问题现象","slug":"问题现象","link":"#问题现象","children":[]},{"level":2,"title":"可能原因","slug":"可能原因","link":"#可能原因","children":[]},{"level":2,"title":"原因分析","slug":"原因分析","link":"#原因分析","children":[{"level":3,"title":"慢SQL问题","slug":"慢sql问题","link":"#慢sql问题","children":[]},{"level":3,"title":"StackOverflow栈溢出问题","slug":"stackoverflow栈溢出问题","link":"#stackoverflow栈溢出问题","children":[]}]},{"level":2,"title":"问题原因","slug":"问题原因","link":"#问题原因","children":[]},{"level":2,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[]}],"git":{"createdTime":1711467623000,"updatedTime":1711467623000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":3.62,"words":1086},"filePathRelative":"problem/backend-problem/product-env-problem/jpa-delete-slowsql-so.md","localizedDate":"2024年3月20日","excerpt":"<h2>背景</h2>\\n<p>MySQL有一张表存放一些第三方应用的回调事件，例如ZOOM的会议回调事件、腾讯会议的会议相关事件</p>\\n<p>该表数据行数有时能达百万级</p>\\n<blockquote>\\n<p><strong>JDK版本：</strong> 13</p>\\n</blockquote>\\n<blockquote>\\n<p><strong>JPA的版本：</strong> <code>org.springframework.boot:spring-boot-starter-data-jpa:3.1.5</code></p>\\n</blockquote>\\n<h2>问题现象</h2>\\n<p>出现栈溢出问题的堆栈：</p>","autoDesc":true}');export{d as comp,k as data};
