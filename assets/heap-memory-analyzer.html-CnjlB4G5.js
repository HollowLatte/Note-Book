import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as n,c as s,a as e,d as a,b as l,e as i}from"./app-lFGRJO1c.js";const p={},c=e("h2",{id:"mat",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mat"},[e("span",null,"MAT")])],-1),m={href:"https://eclipse.dev/mat/",target:"_blank",rel:"noopener noreferrer"},d=i(`<p>MAT对JDK版本有要求，最低需要JDK17，如果环境变量中的配的JDK版本低于17则无法启动</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>配置文件为<code>MemoryAnalyzer.ini</code></p><p><strong>自定义使用JDK版本：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-vm</span>
C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>Java<span class="token punctuation">\\</span>jdk-zulu-21<span class="token punctuation">\\</span>bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>指定MAT的堆大小：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-Xms2048m</span>
<span class="token parameter variable">-Xmx2048m</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果要打开的hprof文件很大，需要将MAT的堆内存也调大，否则可能无法解析成功</p></blockquote><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="leak-suspects内存泄露分析" tabindex="-1"><a class="header-anchor" href="#leak-suspects内存泄露分析"><span>Leak Suspects内存泄露分析</span></a></h3><p>具备自动检测内存泄漏功能，罗列可能存在内存泄漏的问题点。</p><p>一般在分析完Dump文件后就会展现，也可以在 MAT 主页 → Leak Suspects</p><p>关键是它在分析完后，可以点击它显示的Problem中，找到Keywords下的Details，里面会标记出具体哪些对象、线程可能导致内存泄露</p><h3 id="dominator-tree查看大对象" tabindex="-1"><a class="header-anchor" href="#dominator-tree查看大对象"><span>Dominator Tree查看大对象</span></a></h3><p>展现对象的支配关系图，并给出对象支配内存的大小（支配内存等同于 Retained Heap，即其被 GC 回收可释放的内存大小）</p><p>在<code>Overview-&gt;Dominator Tree</code>中可以显示大对象的树形结构</p><p>可以选择分组条件，例如：点击工具栏的Group by result选择Group by class</p><h3 id="histogram直方图" tabindex="-1"><a class="header-anchor" href="#histogram直方图"><span>Histogram直方图</span></a></h3><p>在<code>Overview-&gt;Histogram</code>中可以查看直方图</p><p>一般在Histogram中<code>Integer、String、Object[]</code>会在前几，但是它们3个一般不直接导致内存问题，所以一般忽略这3个</p><p><strong>使用场景：</strong></p><p>有些情况 Dominator tree 无法展现出热点对象，例如Dominator tree 支配内存排名前20的占比均不高，或者按 class 聚合也无明显热点对象，此时 Dominator tree 很难做关联分析判断哪类对象占比高。这时可以使用 Histogram 查看所有对象所属类的分布，快速定位占据 Retained Heap 大头的类。</p>`,22);function h(u,g){const t=r("ExternalLinkIcon");return n(),s("div",null,[c,e("p",null,[e("a",m,[a("Eclipse Memory Analyzer"),l(t)]),a(" 是一个快速且功能丰富的堆分析器，可以帮助发现内存泄漏并减少内存消耗。")]),d])}const b=o(p,[["render",h],["__file","heap-memory-analyzer.html.vue"]]),k=JSON.parse('{"path":"/practice-manual/jvm/tool/heap-memory-analyzer.html","title":"堆内存分析工具MAT","lang":"zh-CN","frontmatter":{"title":"堆内存分析工具MAT","author":null,"category":"JVM","tag":"JVM","date":"2024-03-21T00:00:00.000Z","description":"MAT Eclipse Memory Analyzer 是一个快速且功能丰富的堆分析器，可以帮助发现内存泄漏并减少内存消耗。 MAT对JDK版本有要求，最低需要JDK17，如果环境变量中的配的JDK版本低于17则无法启动 配置 配置文件为MemoryAnalyzer.ini 自定义使用JDK版本： 指定MAT的堆大小： 如果要打开的hprof文件很大，...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/practice-manual/jvm/tool/heap-memory-analyzer.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"堆内存分析工具MAT"}],["meta",{"property":"og:description","content":"MAT Eclipse Memory Analyzer 是一个快速且功能丰富的堆分析器，可以帮助发现内存泄漏并减少内存消耗。 MAT对JDK版本有要求，最低需要JDK17，如果环境变量中的配的JDK版本低于17则无法启动 配置 配置文件为MemoryAnalyzer.ini 自定义使用JDK版本： 指定MAT的堆大小： 如果要打开的hprof文件很大，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T18:41:05.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T18:41:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"堆内存分析工具MAT\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T18:41:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"MAT","slug":"mat","link":"#mat","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"Leak Suspects内存泄露分析","slug":"leak-suspects内存泄露分析","link":"#leak-suspects内存泄露分析","children":[]},{"level":3,"title":"Dominator Tree查看大对象","slug":"dominator-tree查看大对象","link":"#dominator-tree查看大对象","children":[]},{"level":3,"title":"Histogram直方图","slug":"histogram直方图","link":"#histogram直方图","children":[]}]}],"git":{"createdTime":1711478465000,"updatedTime":1711478465000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"practice-manual/jvm/tool/heap-memory-analyzer.md","localizedDate":"2024年3月21日","excerpt":"<h2>MAT</h2>\\n<p><a href=\\"https://eclipse.dev/mat/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Eclipse Memory Analyzer</a> 是一个快速且功能丰富的堆分析器，可以帮助发现内存泄漏并减少内存消耗。</p>\\n<p>MAT对JDK版本有要求，最低需要JDK17，如果环境变量中的配的JDK版本低于17则无法启动</p>\\n<h2>配置</h2>\\n<p>配置文件为<code>MemoryAnalyzer.ini</code></p>\\n<p><strong>自定义使用JDK版本：</strong></p>","autoDesc":true}');export{b as comp,k as data};
