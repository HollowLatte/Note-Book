import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-BgR2ckCt.js";const t={},o=e(`<h2 id="什么是factorybean" tabindex="-1"><a class="header-anchor" href="#什么是factorybean"><span>什么是FactoryBean？</span></a></h2><p><code>FactoryBean</code> 是一个接口，用于定义一个工厂Bean，它可以产生某种类型的对象。当在Spring配置文件中定义一个Bean时，如果这个Bean实现了FactoryBean接口，那么Spring容器不直接返回这个Bean实例，而是返回FactoryBean#getObject() 方法所返回的对象。</p><p>FactoryBean通常用于创建和管理那些通过普通的bean定义很难或者无法直接创建的对象</p><p>以下是几个在源码中的使用案例：</p><ul><li><strong>AOP的ProxyFactoryBean：</strong> 用于创建基于CGLIB或JDK动态代理的AOP代理对象。这个FactoryBean隐藏了创建代理对象的复杂性，使得开发者可以轻松地通过Spring容器获取到代理后的对象。</li><li><strong>MyBatis的SqlSessionFactoryBean：</strong> 用于创建SqlSessionFactory实例。这个实例通常用于创建数据库连接和管理SQL映射。</li><li><strong>Dubbo的ReferenceBean：</strong> ReferenceBean会给要调用的服务创建一个动态代理对象。这个代理对象负责与远程服务进行通信，封装了网络调用的细节</li><li><strong>Spring的JndiObjectFactoryBean：</strong> 用于从JNDI上下文中检索和创建对象。</li></ul><p>通过实现 FactoryBean，能够很好地与Spring框架集成。这意味着它可以利用Spring的依赖注入，生命周期管理等特性，并且能够被Spring容器所管理。</p><h2 id="为什么不使用-bean" tabindex="-1"><a class="header-anchor" href="#为什么不使用-bean"><span>为什么不使用@Bean？</span></a></h2><ol><li>FactoryBean可以更深入地与Spring容器集成，例如通过FactoryBean可以实现对象的延迟初始化、单例管理、作用域控制等。而@Bean注解则更多地被用于简化配置。</li><li>当需要集成的第三方库不能直接注册到Spring容器中时，可以通过实现FactoryBean接口，将第三方库的实例化代码封装在FactoryBean中，从而使得第三方库的对象可以像普通的Spring Bean一样被管理。@Bean注解通常不涉及第三方库的复杂集成逻辑。</li></ol><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例"><span>使用案例</span></a></h2><p>使用<code>ConnectionFactoryBean</code>作为FactoryBean，通过它获取到<code>ConnectionFactory</code>，然后再通过ConnectionFactory创建Connection</p><p>假设每个Connection都需要配置KeepAlive、Timeout，就可以在ConnectionFactory进行直接配置，也可以从配置文件中读取</p><h3 id="connectionfactorybean" tabindex="-1"><a class="header-anchor" href="#connectionfactorybean"><span>ConnectionFactoryBean</span></a></h3><p>实现FactoryBean的类要放入Spring容器才会生效</p><p>当从Spring容器获取ConnectionFactory对象时，Spring会调用ConnectionFactoryBean的getObject来创建ConnectionFactory并放入Spring容器</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectionFactory</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ConnectionFactory</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setKeepAlive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="connectionfactory" tabindex="-1"><a class="header-anchor" href="#connectionfactory"><span>ConnectionFactory</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> timeout<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> keepAlive<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">buildConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建Connection时有默认值的参数</span>
        connection<span class="token punctuation">.</span><span class="token function">setKeepAlive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keepAlive<span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

        connection<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection"><span>Connection</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Connection</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> timeout<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> keepAlive<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">factoryBeanTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 使用hutool spring工具</span>
   <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token class-name">SpringUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token comment">// 创建Connection</span>
   <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">buildConnection</span><span class="token punctuation">(</span><span class="token string">&quot;新连接&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ConnectionFactory(timeout=60, keepAlive=true)
Connection(timeout=60, keepAlive=true, url=localhost:8080, name=新连接)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果看，发现ConnectionFactory确实是通过ConnectionFactoryBean创建出来了</p><p>查看Spring容器内的ConnectionFactoryBean的Bean名称，发现不是<code>connectionFactoryBean</code>而是<code>&amp;connectionFactoryBean</code> ，这是因为Spring使用<code>&amp;</code>符号用于区分 FactoryBean 本身和它所创建的对象</p><h2 id="sqlsessionfactorybean源码解析" tabindex="-1"><a class="header-anchor" href="#sqlsessionfactorybean源码解析"><span>SqlSessionFactoryBean源码解析</span></a></h2><p>在MyBatis源码中，使用<code>SqlSessionFactoryBean</code>读取Spring配置文件中的参数来配置MyBatis的<code>SqlSessionFactory</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mybatis.config-location=classpath:mybatis-config.xml
mybatis.mapper-locations=classpath:mapper/*.xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>// TODO</p>`,29),c=[o];function p(i,l){return a(),s("div",null,c)}const d=n(t,[["render",p],["__file","spring-factorybean.html.vue"]]),k=JSON.parse('{"path":"/notebook/framework/spring-springboot/spring-factorybean.html","title":"Spring FactoryBean","lang":"zh-CN","frontmatter":{"title":"Spring FactoryBean","author":null,"category":"Spring","tag":"Spring","date":"2024-03-26T00:00:00.000Z","description":"什么是FactoryBean？ FactoryBean 是一个接口，用于定义一个工厂Bean，它可以产生某种类型的对象。当在Spring配置文件中定义一个Bean时，如果这个Bean实现了FactoryBean接口，那么Spring容器不直接返回这个Bean实例，而是返回FactoryBean#getObject() 方法所返回的对象。 Factory...","head":[["meta",{"property":"og:url","content":"https://hollowlatte.github.io/Note-Book/Note-Book/notebook/framework/spring-springboot/spring-factorybean.html"}],["meta",{"property":"og:site_name","content":"Note-Book"}],["meta",{"property":"og:title","content":"Spring FactoryBean"}],["meta",{"property":"og:description","content":"什么是FactoryBean？ FactoryBean 是一个接口，用于定义一个工厂Bean，它可以产生某种类型的对象。当在Spring配置文件中定义一个Bean时，如果这个Bean实现了FactoryBean接口，那么Spring容器不直接返回这个Bean实例，而是返回FactoryBean#getObject() 方法所返回的对象。 Factory..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:40:23.000Z"}],["meta",{"property":"article:author","content":"Hollow-Latte"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:40:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring FactoryBean\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T15:40:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hollow-Latte\\",\\"url\\":\\"https://hollowlatte.github.io/Note-Book\\"}]}"]]},"headers":[{"level":2,"title":"什么是FactoryBean？","slug":"什么是factorybean","link":"#什么是factorybean","children":[]},{"level":2,"title":"为什么不使用@Bean？","slug":"为什么不使用-bean","link":"#为什么不使用-bean","children":[]},{"level":2,"title":"使用案例","slug":"使用案例","link":"#使用案例","children":[{"level":3,"title":"ConnectionFactoryBean","slug":"connectionfactorybean","link":"#connectionfactorybean","children":[]},{"level":3,"title":"ConnectionFactory","slug":"connectionfactory","link":"#connectionfactory","children":[]},{"level":3,"title":"Connection","slug":"connection","link":"#connection","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"SqlSessionFactoryBean源码解析","slug":"sqlsessionfactorybean源码解析","link":"#sqlsessionfactorybean源码解析","children":[]}],"git":{"createdTime":1711467623000,"updatedTime":1711467623000,"contributors":[{"name":"hollowlatte","email":"hollowlatte@outlook.com","commits":1}]},"readingTime":{"minutes":2.9,"words":870},"filePathRelative":"notebook/framework/spring-springboot/spring-factorybean.md","localizedDate":"2024年3月26日","excerpt":"<h2>什么是FactoryBean？</h2>\\n<p><code>FactoryBean</code>\\n是一个接口，用于定义一个工厂Bean，它可以产生某种类型的对象。当在Spring配置文件中定义一个Bean时，如果这个Bean实现了FactoryBean接口，那么Spring容器不直接返回这个Bean实例，而是返回FactoryBean#getObject()\\n方法所返回的对象。</p>\\n<p>FactoryBean通常用于创建和管理那些通过普通的bean定义很难或者无法直接创建的对象</p>\\n<p>以下是几个在源码中的使用案例：</p>\\n<ul>\\n<li><strong>AOP的ProxyFactoryBean：</strong> 用于创建基于CGLIB或JDK动态代理的AOP代理对象。这个FactoryBean隐藏了创建代理对象的复杂性，使得开发者可以轻松地通过Spring容器获取到代理后的对象。</li>\\n<li><strong>MyBatis的SqlSessionFactoryBean：</strong> 用于创建SqlSessionFactory实例。这个实例通常用于创建数据库连接和管理SQL映射。</li>\\n<li><strong>Dubbo的ReferenceBean：</strong> ReferenceBean会给要调用的服务创建一个动态代理对象。这个代理对象负责与远程服务进行通信，封装了网络调用的细节</li>\\n<li><strong>Spring的JndiObjectFactoryBean：</strong> 用于从JNDI上下文中检索和创建对象。</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
